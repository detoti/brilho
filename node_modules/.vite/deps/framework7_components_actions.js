import {
  ModalMethods,
  modal_class_default
} from "./chunk-2SPOWFPE.js";
import {
  jsx_default
} from "./chunk-OUNVTANF.js";
import "./chunk-JWL65P4K.js";
import "./chunk-GBDLSSFZ.js";
import {
  getDevice
} from "./chunk-XFNZVQ4Z.js";
import "./chunk-CMOS4D7O.js";
import {
  dom7_default
} from "./chunk-GWMKRGKK.js";
import {
  extend,
  nextTick
} from "./chunk-UUGCU45C.js";
import {
  getDocument,
  getWindow
} from "./chunk-PRZ7VHHA.js";
import "./chunk-ZS7NZCD4.js";

// node_modules/framework7/components/actions/actions-class.js
var Actions = class extends modal_class_default {
  constructor(app, params) {
    const extendedParams = extend({
      on: {}
    }, app.params.actions, params);
    super(app, extendedParams);
    const actions = this;
    const device = getDevice();
    const window = getWindow();
    const document = getDocument();
    actions.params = extendedParams;
    let groups;
    if (actions.params.buttons) {
      groups = actions.params.buttons;
      if (!Array.isArray(groups[0]))
        groups = [groups];
    }
    actions.groups = groups;
    let $el;
    if (actions.params.el) {
      $el = dom7_default(actions.params.el).eq(0);
    } else if (actions.params.content) {
      $el = dom7_default(actions.params.content).filter((node) => node.nodeType === 1).eq(0);
    } else if (actions.params.buttons) {
      if (actions.params.convertToPopover) {
        actions.popoverHtml = actions.renderPopover();
      }
      actions.actionsHtml = actions.render();
    }
    if ($el && $el.length > 0 && $el[0].f7Modal) {
      return $el[0].f7Modal;
    }
    if ($el && $el.length === 0 && !(actions.actionsHtml || actions.popoverHtml)) {
      return actions.destroy();
    }
    let $backdropEl;
    if (actions.params.backdrop && actions.params.backdropEl) {
      $backdropEl = dom7_default(actions.params.backdropEl);
    } else if (actions.params.backdrop) {
      if (actions.params.backdropUnique) {
        $backdropEl = dom7_default('<div class="popup-backdrop popup-backdrop-unique"></div>');
        actions.$containerEl.append($backdropEl);
      } else {
        $backdropEl = actions.$containerEl.children(".actions-backdrop");
      }
      if ($backdropEl.length === 0) {
        $backdropEl = dom7_default('<div class="actions-backdrop"></div>');
        actions.$containerEl.append($backdropEl);
      }
    }
    const originalOpen = actions.open;
    const originalClose = actions.close;
    let popover;
    function buttonOnClick(e) {
      const $buttonEl = dom7_default(this);
      let buttonIndex;
      let groupIndex;
      if ($buttonEl.hasClass("list-button") || $buttonEl.hasClass("item-link")) {
        buttonIndex = $buttonEl.parents("li").index();
        groupIndex = $buttonEl.parents(".list").index();
      } else {
        buttonIndex = $buttonEl.index();
        groupIndex = $buttonEl.parents(".actions-group").index();
      }
      if (typeof groups !== "undefined") {
        const button = groups[groupIndex][buttonIndex];
        if (button.onClick)
          button.onClick(actions, e);
        if (actions.params.onClick)
          actions.params.onClick(actions, e);
        if (button.close !== false)
          actions.close();
      }
    }
    actions.open = function open(animate) {
      let convertToPopover = false;
      const {
        targetEl,
        targetX,
        targetY,
        targetWidth,
        targetHeight
      } = actions.params;
      if (actions.params.convertToPopover && (targetEl || targetX !== void 0 && targetY !== void 0)) {
        if (actions.params.forceToPopover || device.ios && device.ipad || app.width >= 768 || device.desktop) {
          convertToPopover = true;
        }
      }
      if (convertToPopover && actions.popoverHtml) {
        popover = app.popover.create({
          containerEl: actions.params.containerEl,
          content: actions.popoverHtml,
          backdrop: actions.params.backdrop,
          targetEl,
          targetX,
          targetY,
          targetWidth,
          targetHeight,
          on: {
            open() {
              if (!actions.$el) {
                actions.$el = popover.$el;
              }
              actions.$el.trigger(`modal:open ${actions.type.toLowerCase()}:open`);
              actions.emit(`local::open modalOpen ${actions.type}Open`, actions);
            },
            opened() {
              if (!actions.$el) {
                actions.$el = popover.$el;
              }
              actions.$el.trigger(`modal:opened ${actions.type.toLowerCase()}:opened`);
              actions.emit(`local::opened modalOpened ${actions.type}Opened`, actions);
            },
            close() {
              if (!actions.$el) {
                actions.$el = popover.$el;
              }
              actions.$el.trigger(`modal:close ${actions.type.toLowerCase()}:close`);
              actions.emit(`local::close modalClose ${actions.type}Close`, actions);
            },
            closed() {
              if (!actions.$el) {
                actions.$el = popover.$el;
              }
              actions.$el.trigger(`modal:closed ${actions.type.toLowerCase()}:closed`);
              actions.emit(`local::closed modalClosed ${actions.type}Closed`, actions);
            }
          }
        });
        popover.open(animate);
        popover.once("popoverOpened", () => {
          popover.$el.find(".list-button, .item-link").each((buttonEl) => {
            dom7_default(buttonEl).on("click", buttonOnClick);
          });
        });
        popover.once("popoverClosed", () => {
          popover.$el.find(".list-button, .item-link").each((buttonEl) => {
            dom7_default(buttonEl).off("click", buttonOnClick);
          });
          nextTick(() => {
            popover.destroy();
            popover = void 0;
          });
        });
      } else {
        actions.$el = actions.actionsHtml ? dom7_default(actions.actionsHtml) : actions.$el;
        actions.$el[0].f7Modal = actions;
        if (actions.groups) {
          actions.$el.find(".actions-button").each((buttonEl) => {
            dom7_default(buttonEl).on("click", buttonOnClick);
          });
          actions.once("actionsClosed", () => {
            actions.$el.find(".actions-button").each((buttonEl) => {
              dom7_default(buttonEl).off("click", buttonOnClick);
            });
          });
        }
        actions.el = actions.$el[0];
        originalOpen.call(actions, animate);
      }
      return actions;
    };
    actions.close = function close(animate) {
      if (popover) {
        popover.close(animate);
      } else {
        originalClose.call(actions, animate);
      }
      return actions;
    };
    extend(actions, {
      app,
      $el,
      el: $el ? $el[0] : void 0,
      $backdropEl,
      backdropEl: $backdropEl && $backdropEl[0],
      type: "actions"
    });
    function handleClick(e) {
      const target = e.target;
      const $target = dom7_default(target);
      const keyboardOpened = !device.desktop && device.cordova && (window.Keyboard && window.Keyboard.isVisible || window.cordova.plugins && window.cordova.plugins.Keyboard && window.cordova.plugins.Keyboard.isVisible);
      if (keyboardOpened)
        return;
      if ($target.closest(actions.el).length === 0) {
        if (actions.params.closeByBackdropClick && actions.params.backdrop && actions.backdropEl && actions.backdropEl === target) {
          actions.close();
        } else if (actions.params.closeByOutsideClick) {
          actions.close();
        }
      }
    }
    function onKeyDown(e) {
      const keyCode = e.keyCode;
      if (keyCode === 27 && actions.params.closeOnEscape) {
        actions.close();
      }
    }
    if (actions.params.closeOnEscape) {
      actions.on("open", () => {
        dom7_default(document).on("keydown", onKeyDown);
      });
      actions.on("close", () => {
        dom7_default(document).off("keydown", onKeyDown);
      });
    }
    actions.on("opened", () => {
      if (actions.params.closeByBackdropClick || actions.params.closeByOutsideClick) {
        app.on("click", handleClick);
      }
    });
    actions.on("close", () => {
      if (actions.params.closeByBackdropClick || actions.params.closeByOutsideClick) {
        app.off("click", handleClick);
      }
    });
    if ($el) {
      $el[0].f7Modal = actions;
    }
    return actions;
  }
  render() {
    const actions = this;
    if (actions.params.render)
      return actions.params.render.call(actions, actions);
    const {
      groups
    } = actions;
    const cssClass = actions.params.cssClass;
    return jsx_default("div", {
      class: `actions-modal${actions.params.grid ? " actions-grid" : ""} ${cssClass || ""}`
    }, groups.map((group) => jsx_default("div", {
      class: "actions-group"
    }, group.map((button) => {
      const buttonClasses = [`actions-${button.label ? "label" : "button"}`];
      const {
        color,
        bg,
        strong,
        disabled,
        label,
        text,
        icon
      } = button;
      if (color)
        buttonClasses.push(`color-${color}`);
      if (bg)
        buttonClasses.push(`bg-color-${bg}`);
      if (strong)
        buttonClasses.push("actions-button-strong");
      if (disabled)
        buttonClasses.push("disabled");
      if (label) {
        return jsx_default("div", {
          class: buttonClasses.join(" ")
        }, text);
      }
      return jsx_default("div", {
        class: buttonClasses.join(" ")
      }, icon && jsx_default("div", {
        class: "actions-button-media"
      }, icon), jsx_default("div", {
        class: "actions-button-text"
      }, text));
    }))));
  }
  renderPopover() {
    const actions = this;
    if (actions.params.renderPopover)
      return actions.params.renderPopover.call(actions, actions);
    const {
      groups
    } = actions;
    const cssClass = actions.params.cssClass;
    return jsx_default("div", {
      class: `popover popover-from-actions ${cssClass || ""}`
    }, jsx_default("div", {
      class: "popover-inner"
    }, groups.map((group) => jsx_default("div", {
      class: "list"
    }, jsx_default("ul", null, group.map((button) => {
      const itemClasses = [];
      const {
        color,
        bg,
        strong,
        disabled,
        label,
        text,
        icon
      } = button;
      if (color)
        itemClasses.push(`color-${color}`);
      if (bg)
        itemClasses.push(`bg-color-${bg}`);
      if (strong)
        itemClasses.push("popover-from-actions-strong");
      if (disabled)
        itemClasses.push("disabled");
      if (label) {
        itemClasses.push("popover-from-actions-label");
        return `<li class="${itemClasses.join(" ")}">${text}</li>`;
      }
      if (icon) {
        itemClasses.push("item-link item-content");
        return jsx_default("li", null, jsx_default("a", {
          class: itemClasses.join(" ")
        }, jsx_default("div", {
          class: "item-media"
        }, icon), jsx_default("div", {
          class: "item-inner"
        }, jsx_default("div", {
          class: "item-title"
        }, text))));
      }
      itemClasses.push("list-button");
      return jsx_default("li", null, jsx_default("a", {
        class: itemClasses.join(" ")
      }, text));
    }))))));
  }
};
var actions_class_default = Actions;

// node_modules/framework7/components/actions/actions.js
var actions_default = {
  name: "actions",
  params: {
    actions: {
      convertToPopover: true,
      forceToPopover: false,
      backdrop: true,
      backdropEl: void 0,
      backdropUnique: false,
      cssClass: null,
      closeByBackdropClick: true,
      closeOnEscape: false,
      render: null,
      renderPopover: null,
      containerEl: null
    }
  },
  static: {
    Actions: actions_class_default
  },
  create() {
    const app = this;
    app.actions = ModalMethods({
      app,
      constructor: actions_class_default,
      defaultSelector: ".actions-modal.modal-in"
    });
  },
  clicks: {
    ".actions-open": function openActions($clickedEl, data) {
      if (data === void 0) {
        data = {};
      }
      const app = this;
      app.actions.open(data.actions, data.animate, $clickedEl);
    },
    ".actions-close": function closeActions($clickedEl, data) {
      if (data === void 0) {
        data = {};
      }
      const app = this;
      app.actions.close(data.actions, data.animate, $clickedEl);
    }
  }
};
export {
  actions_default as default
};
//# sourceMappingURL=framework7_components_actions.js.map
