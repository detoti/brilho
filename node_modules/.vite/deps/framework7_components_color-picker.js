import {
  jsx_default
} from "./chunk-OUNVTANF.js";
import {
  ConstructorMethods
} from "./chunk-JWL65P4K.js";
import {
  class_default
} from "./chunk-GBDLSSFZ.js";
import {
  getDevice
} from "./chunk-XFNZVQ4Z.js";
import {
  getSupport
} from "./chunk-CMOS4D7O.js";
import {
  dom7_default
} from "./chunk-GWMKRGKK.js";
import {
  colorHexToRgb,
  colorHsbToHsl,
  colorHslToHsb,
  colorHslToRgb,
  colorRgbToHex,
  colorRgbToHsl,
  deleteProps,
  extend,
  nextTick
} from "./chunk-UUGCU45C.js";
import "./chunk-PRZ7VHHA.js";
import "./chunk-ZS7NZCD4.js";

// node_modules/framework7/components/color-picker/modules/alpha-slider.js
var alpha_slider_default = {
  render(self) {
    const {
      sliderLabel,
      sliderValue,
      sliderValueEditable,
      alphaLabelText
    } = self.params;
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-alpha-slider"
    }, jsx_default("div", {
      class: "color-picker-slider-wrap"
    }, sliderLabel && jsx_default("div", {
      class: "color-picker-slider-label"
    }, alphaLabelText), jsx_default("div", {
      class: "range-slider color-picker-slider color-picker-slider-alpha"
    }), sliderValue && jsx_default("div", {
      class: "color-picker-slider-value"
    }, sliderValueEditable ? jsx_default("input", {
      type: "number",
      step: "0.01",
      min: "0",
      max: "1",
      class: "color-picker-value-alpha"
    }) : jsx_default("span", {
      class: "color-picker-value-alpha"
    }))));
  },
  init(self) {
    self.alphaRangeSlider = self.app.range.create({
      el: self.$el.find(".color-picker-slider-alpha"),
      min: 0,
      max: 1,
      step: 0.01,
      value: 1,
      on: {
        change(range, value) {
          const alpha = Math.floor(value * 100) / 100;
          self.setValue({
            alpha
          });
        }
      }
    });
    function handleInputChange(e) {
      const alpha = self.value.alpha;
      let value = parseFloat(e.target.value);
      if (Number.isNaN(value)) {
        e.target.value = alpha;
        return;
      }
      value = Math.max(0, Math.min(1, value));
      self.setValue({
        alpha: value
      });
    }
    self.$el.on("change", ".color-picker-module-alpha-slider input", handleInputChange);
    self.destroyAlphaSliderEvents = function destroyAlphaSliderEvents() {
      self.$el.off("change", ".color-picker-module-alpha-slider input", handleInputChange);
    };
  },
  update(self) {
    const {
      value
    } = self;
    const {
      sliderValue,
      sliderValueEditable
    } = self.params;
    const {
      alpha
    } = value;
    self.alphaRangeSlider.value = alpha;
    self.alphaRangeSlider.layout();
    if (sliderValue && sliderValueEditable) {
      self.$el.find("input.color-picker-value-alpha").val(alpha);
    } else {
      self.$el.find("span.color-picker-value-alpha").text(alpha);
    }
  },
  destroy(self) {
    if (self.alphaRangeSlider && self.alphaRangeSlider.destroy) {
      self.alphaRangeSlider.destroy();
    }
    delete self.alphaRangeSlider;
    if (self.destroyAlphaSliderEvents)
      self.destroyAlphaSliderEvents();
    delete self.destroyAlphaSliderEvents;
  }
};

// node_modules/framework7/components/color-picker/modules/current-color.js
var current_color_default = {
  render() {
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-current-color"
    }, jsx_default("div", {
      class: "color-picker-current-color"
    }));
  },
  update(self) {
    self.$el.find(".color-picker-module-current-color .color-picker-current-color").css("background-color", self.value.hex);
  }
};

// node_modules/framework7/components/color-picker/modules/hex.js
var hex_default = {
  render(self) {
    const {
      hexLabel,
      hexLabelText,
      hexValueEditable
    } = self.params;
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-hex"
    }, jsx_default("div", {
      class: "color-picker-hex-wrap"
    }, hexLabel && jsx_default("div", {
      class: "color-picker-hex-label"
    }, hexLabelText), jsx_default("div", {
      class: "color-picker-hex-value"
    }, hexValueEditable ? jsx_default("input", {
      type: "text",
      class: "color-picker-value-hex"
    }) : jsx_default("span", {
      class: "color-picker-value-hex"
    }))));
  },
  init(self) {
    function handleInputChange(e) {
      const hex = self.value.hex;
      let value = e.target.value.replace(/#/g, "");
      if (Number.isNaN(value) || !value || value.length !== 3 && value.length !== 6) {
        e.target.value = hex;
        return;
      }
      const min = 0;
      const current = parseInt(value, 16);
      const max = parseInt("ffffff", 16);
      if (current > max) {
        value = "fff";
      }
      if (current < min) {
        value = "000";
      }
      self.setValue({
        hex: value
      });
    }
    self.$el.on("change", ".color-picker-module-hex input", handleInputChange);
    self.destroyHexEvents = function destroyHexEvents() {
      self.$el.off("change", ".color-picker-module-hex input", handleInputChange);
    };
  },
  update(self) {
    const {
      value
    } = self;
    const {
      hexValueEditable
    } = self.params;
    const {
      hex
    } = value;
    if (hexValueEditable) {
      self.$el.find("input.color-picker-value-hex").val(hex);
    } else {
      self.$el.find("span.color-picker-value-hex").text(hex);
    }
  },
  destroy(self) {
    if (self.destroyHexEvents)
      self.destroyHexEvents();
    delete self.destroyHexEvents;
  }
};

// node_modules/framework7/components/color-picker/modules/hsb-sliders.js
var hsb_sliders_default = {
  render(self) {
    const {
      sliderLabel,
      sliderValue,
      sliderValueEditable,
      hueLabelText,
      saturationLabelText,
      brightnessLabelText
    } = self.params;
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-hsb-sliders"
    }, jsx_default("div", {
      class: "color-picker-slider-wrap"
    }, sliderLabel && jsx_default("div", {
      class: "color-picker-slider-label"
    }, hueLabelText), jsx_default("div", {
      class: "range-slider color-picker-slider color-picker-slider-hue"
    }), sliderValue && jsx_default("div", {
      class: "color-picker-slider-value"
    }, sliderValueEditable ? jsx_default("input", {
      type: "number",
      step: "0.1",
      min: "0",
      max: "360",
      class: "color-picker-value-hue",
      "data-color-index": "0"
    }) : jsx_default("span", {
      class: "color-picker-value-hue"
    }))), jsx_default("div", {
      class: "color-picker-slider-wrap"
    }, sliderLabel && jsx_default("div", {
      class: "color-picker-slider-label"
    }, saturationLabelText), jsx_default("div", {
      class: "range-slider color-picker-slider color-picker-slider-saturation"
    }), sliderValue && jsx_default("div", {
      class: "color-picker-slider-value"
    }, sliderValueEditable ? jsx_default("input", {
      type: "number",
      step: "0.1",
      min: "0",
      max: "100",
      class: "color-picker-value-saturation",
      "data-color-index": "1"
    }) : jsx_default("span", {
      class: "color-picker-value-saturation"
    }))), jsx_default("div", {
      class: "color-picker-slider-wrap"
    }, sliderLabel && jsx_default("div", {
      class: "color-picker-slider-label"
    }, brightnessLabelText), jsx_default("div", {
      class: "range-slider color-picker-slider color-picker-slider-brightness"
    }), sliderValue && jsx_default("div", {
      class: "color-picker-slider-value"
    }, sliderValueEditable ? jsx_default("input", {
      type: "number",
      step: "0.1",
      min: "0",
      max: "100",
      class: "color-picker-value-brightness",
      "data-color-index": "2"
    }) : jsx_default("span", {
      class: "color-picker-value-brightness"
    }))));
  },
  init(self) {
    self.hueRangeSlider = self.app.range.create({
      el: self.$el.find(".color-picker-slider-hue"),
      min: 0,
      max: 360,
      step: 0.1,
      value: 0,
      on: {
        change(range, value) {
          self.setValue({
            hue: value
          });
        }
      }
    });
    self.saturationRangeSlider = self.app.range.create({
      el: self.$el.find(".color-picker-slider-saturation"),
      min: 0,
      max: 1,
      step: 1e-3,
      value: 0,
      on: {
        change(range, value) {
          const s = Math.floor(value * 1e3) / 1e3;
          self.setValue({
            hsb: [self.value.hsb[0], s, self.value.hsb[2]]
          });
        }
      }
    });
    self.brightnessRangeSlider = self.app.range.create({
      el: self.$el.find(".color-picker-slider-brightness"),
      min: 0,
      max: 1,
      step: 1e-3,
      value: 0,
      on: {
        change(range, value) {
          const b = Math.floor(value * 1e3) / 1e3;
          self.setValue({
            hsb: [self.value.hsb[0], self.value.hsb[1], b]
          });
        }
      }
    });
    function handleInputChange(e) {
      const hsb = [...self.value.hsb];
      const index = parseInt(dom7_default(e.target).attr("data-color-index"), 10);
      let value = parseFloat(e.target.value);
      if (Number.isNaN(value)) {
        e.target.value = hsb[index];
        return;
      }
      if (index === 0) {
        value = Math.max(0, Math.min(360, value));
      } else {
        value = Math.max(0, Math.min(100, value)) / 100;
      }
      hsb[index] = value;
      self.setValue({
        hsb
      });
    }
    self.$el.on("change", ".color-picker-module-hsb-sliders input", handleInputChange);
    self.destroyHsbSlidersEvents = function destroyHsbSlidersEvents() {
      self.$el.off("change", ".color-picker-module-hsb-sliders input", handleInputChange);
    };
  },
  update(self) {
    const {
      app,
      value
    } = self;
    const {
      sliderValue,
      sliderValueEditable
    } = self.params;
    const {
      hsb,
      hue
    } = value;
    self.hueRangeSlider.value = hue;
    self.saturationRangeSlider.value = hsb[1];
    self.brightnessRangeSlider.value = hsb[2];
    self.hueRangeSlider.layout();
    self.saturationRangeSlider.layout();
    self.brightnessRangeSlider.layout();
    const hslCurrent = colorHsbToHsl(hsb[0], hsb[1], 1);
    const hslLeft = colorHsbToHsl(hsb[0], 0, 1);
    const hslRight = colorHsbToHsl(hsb[0], 1, 1);
    const brightness = hsb[2];
    self.hueRangeSlider.$el[0].style.setProperty("--f7-range-knob-color", `hsl(${hue}, 100%, 50%)`);
    self.saturationRangeSlider.$el[0].style.setProperty("--f7-range-knob-color", `hsl(${hslCurrent[0]}, ${hslCurrent[1] * 100}%, ${hslCurrent[2] * 100}%)`);
    self.brightnessRangeSlider.$el[0].style.setProperty("--f7-range-knob-color", `rgb(${brightness * 255}, ${brightness * 255}, ${brightness * 255})`);
    self.saturationRangeSlider.$el.find(".range-bar").css("background-image", `linear-gradient(${app.rtl ? "to left" : "to right"}, hsl(${hslLeft[0]}, ${hslLeft[1] * 100}%, ${hslLeft[2] * 100}%), hsl(${hslRight[0]}, ${hslRight[1] * 100}%, ${hslRight[2] * 100}%))`);
    if (sliderValue && sliderValueEditable) {
      self.$el.find("input.color-picker-value-hue").val(`${hue}`);
      self.$el.find("input.color-picker-value-saturation").val(`${hsb[1] * 1e3 / 10}`);
      self.$el.find("input.color-picker-value-brightness").val(`${hsb[2] * 1e3 / 10}`);
    } else if (sliderValue) {
      self.$el.find("span.color-picker-value-hue").text(`${hue}`);
      self.$el.find("span.color-picker-value-saturation").text(`${hsb[1] * 1e3 / 10}`);
      self.$el.find("span.color-picker-value-brightness").text(`${hsb[2] * 1e3 / 10}`);
    }
  },
  destroy(self) {
    if (self.hueRangeSlider && self.hueRangeSlider.destroy) {
      self.hueRangeSlider.destroy();
    }
    if (self.saturationRangeSlider && self.saturationRangeSlider.destroy) {
      self.saturationRangeSlider.destroy();
    }
    if (self.brightnessRangeSlider && self.brightnessRangeSlider.destroy) {
      self.brightnessRangeSlider.destroy();
    }
    delete self.hueRangeSlider;
    delete self.saturationRangeSlider;
    delete self.brightnessRangeSlider;
    if (self.destroyHsbSlidersEvents)
      self.destroyHsbSlidersEvents();
    delete self.destroyHsbSlidersEvents;
  }
};

// node_modules/framework7/components/color-picker/modules/hue-slider.js
var hue_slider_default = {
  render(self) {
    const {
      sliderLabel,
      sliderValue,
      sliderValueEditable,
      hueLabelText
    } = self.params;
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-hue-slider"
    }, jsx_default("div", {
      class: "color-picker-slider-wrap"
    }, sliderLabel && jsx_default("div", {
      class: "color-picker-slider-label"
    }, hueLabelText), jsx_default("div", {
      class: "range-slider color-picker-slider color-picker-slider-hue"
    }), sliderValue && jsx_default("div", {
      class: "color-picker-slider-value"
    }, sliderValueEditable ? jsx_default("input", {
      type: "number",
      step: "0.1",
      min: "0",
      max: "360",
      class: "color-picker-value-hue"
    }) : jsx_default("span", {
      class: "color-picker-value-hue"
    }))));
  },
  init(self) {
    self.hueRangeSlider = self.app.range.create({
      el: self.$el.find(".color-picker-slider-hue"),
      min: 0,
      max: 360,
      step: 0.1,
      value: 0,
      on: {
        change(range, value) {
          self.setValue({
            hue: value
          });
        }
      }
    });
  },
  update(self) {
    const {
      value
    } = self;
    const {
      sliderValue,
      sliderValueEditable
    } = self.params;
    const {
      hue
    } = value;
    self.hueRangeSlider.value = hue;
    self.hueRangeSlider.layout();
    self.hueRangeSlider.$el[0].style.setProperty("--f7-range-knob-color", `hsl(${hue}, 100%, 50%)`);
    if (sliderValue && sliderValueEditable) {
      self.$el.find("input.color-picker-value-hue").val(`${hue}`);
    } else if (sliderValue) {
      self.$el.find("span.color-picker-value-hue").text(`${hue}`);
    }
  },
  destroy(self) {
    if (self.hueRangeSlider && self.hueRangeSlider.destroy) {
      self.hueRangeSlider.destroy();
    }
    delete self.hueRangeSlider;
  }
};

// node_modules/framework7/components/color-picker/modules/brightness-slider.js
var brightness_slider_default = {
  render(self) {
    const {
      sliderLabel,
      sliderValue,
      sliderValueEditable,
      brightnessLabelText
    } = self.params;
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-brightness-slider"
    }, jsx_default("div", {
      class: "color-picker-slider-wrap"
    }, sliderLabel && jsx_default("div", {
      class: "color-picker-slider-label"
    }, brightnessLabelText), jsx_default("div", {
      class: "range-slider color-picker-slider color-picker-slider-brightness"
    }), sliderValue && jsx_default("div", {
      class: "color-picker-slider-value"
    }, sliderValueEditable ? jsx_default("input", {
      type: "number",
      step: "0.1",
      min: "0",
      max: "100",
      class: "color-picker-value-brightness"
    }) : jsx_default("span", {
      class: "color-picker-value-brightness"
    }))));
  },
  init(self) {
    self.brightnessRangeSlider = self.app.range.create({
      el: self.$el.find(".color-picker-slider-brightness"),
      min: 0,
      max: 1,
      step: 1e-3,
      value: 0,
      on: {
        change(range, value) {
          const b = Math.floor(value * 1e3) / 1e3;
          self.setValue({
            hsb: [self.value.hsb[0], self.value.hsb[1], b]
          });
        }
      }
    });
  },
  update(self) {
    const {
      value,
      app
    } = self;
    const {
      sliderValue,
      sliderValueEditable
    } = self.params;
    const {
      hsb
    } = value;
    self.brightnessRangeSlider.value = hsb[2];
    self.brightnessRangeSlider.layout();
    const hslCurrent = colorHsbToHsl(hsb[0], hsb[1], hsb[2]);
    const hslLeft = colorHsbToHsl(hsb[0], hsb[1], 0);
    const hslRight = colorHsbToHsl(hsb[0], hsb[1], 1);
    self.brightnessRangeSlider.$el[0].style.setProperty("--f7-range-knob-color", `hsl(${hslCurrent[0]}, ${hslCurrent[1] * 100}%, ${hslCurrent[2] * 100}%)`);
    self.brightnessRangeSlider.$el.find(".range-bar").css("background-image", `linear-gradient(${app.rtl ? "to left" : "to right"}, hsl(${hslLeft[0]}, ${hslLeft[1] * 100}%, ${hslLeft[2] * 100}%), hsl(${hslRight[0]}, ${hslRight[1] * 100}%, ${hslRight[2] * 100}%))`);
    if (sliderValue && sliderValueEditable) {
      self.$el.find("input.color-picker-value-brightness").val(`${hsb[2] * 1e3 / 10}`);
    } else if (sliderValue) {
      self.$el.find("span.color-picker-value-brightness").text(`${hsb[2] * 1e3 / 10}`);
    }
  },
  destroy(self) {
    if (self.brightnessRangeSlider && self.brightnessRangeSlider.destroy) {
      self.brightnessRangeSlider.destroy();
    }
    delete self.brightnessRangeSlider;
  }
};

// node_modules/framework7/components/color-picker/modules/palette.js
var palette_default = {
  render(self) {
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-palette"
    }, jsx_default("div", {
      class: "color-picker-palette"
    }, self.params.palette.map((p) => {
      if (Array.isArray(p)) {
        let row = '<div class="color-picker-palette-row">';
        row += p.map((c) => `
                <div class="color-picker-palette-value" data-palette-color="${c}" style="background-color: ${c}"></div>
              `).join("");
        row += "</div>";
        return row;
      }
      return jsx_default("div", {
        class: "color-picker-palette-value",
        "data-palette-color": p,
        style: `background-color: ${p}`
      });
    })));
  },
  init(self) {
    function handlePaletteClick(e) {
      const hex = dom7_default(e.target).attr("data-palette-color");
      self.setValue({
        hex
      });
    }
    self.$el.on("click", ".color-picker-module-palette .color-picker-palette-value", handlePaletteClick);
    self.destroyPaletteEvents = function destroyPaletteEvents() {
      self.$el.off("click", ".color-picker-module-hex input", handlePaletteClick);
    };
  },
  destroy(self) {
    if (self.destroyPaletteEvents) {
      self.destroyPaletteEvents();
    }
    delete self.destroyPaletteEvents;
  }
};

// node_modules/framework7/components/color-picker/modules/initial-current-colors.js
var initial_current_colors_default = {
  render() {
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-initial-current-colors"
    }, jsx_default("div", {
      class: "color-picker-initial-current-colors"
    }, jsx_default("div", {
      class: "color-picker-initial-color"
    }), jsx_default("div", {
      class: "color-picker-current-color"
    })));
  },
  init(self) {
    function handleInitialColorClick() {
      if (self.initialValue) {
        const {
          hex,
          alpha
        } = self.initialValue;
        self.setValue({
          hex,
          alpha
        });
      }
    }
    self.$el.on("click", ".color-picker-initial-color", handleInitialColorClick);
    self.destroyInitialCurrentEvents = function destroyInitialCurrentEvents() {
      self.$el.off("click", ".color-picker-initial-color", handleInitialColorClick);
    };
  },
  update(self) {
    self.$el.find(".color-picker-module-initial-current-colors .color-picker-initial-color").css("background-color", self.initialValue.hex);
    self.$el.find(".color-picker-module-initial-current-colors .color-picker-current-color").css("background-color", self.value.hex);
  },
  destroy(self) {
    if (self.destroyInitialCurrentEvents) {
      self.destroyInitialCurrentEvents();
    }
    delete self.destroyInitialCurrentEvents;
  }
};

// node_modules/framework7/components/color-picker/modules/rgb-bars.js
var rgb_bars_default = {
  render(self) {
    const {
      barLabel,
      barValue,
      barValueEditable,
      redLabelText,
      greenLabelText,
      blueLabelText
    } = self.params;
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-rgb-bars"
    }, jsx_default("div", {
      class: "color-picker-bar-wrap"
    }, barLabel && jsx_default("div", {
      class: "color-picker-bar-label"
    }, redLabelText), jsx_default("div", {
      class: "range-slider color-picker-bar color-picker-bar-red"
    }), barValue && jsx_default("div", {
      class: "color-picker-bar-value"
    }, barValueEditable ? jsx_default("input", {
      type: "number",
      step: "1",
      min: "0",
      max: "255",
      class: "color-picker-value-bar-red",
      "data-color-index": "0"
    }) : jsx_default("span", {
      class: "color-picker-value-bar-red"
    }))), jsx_default("div", {
      class: "color-picker-bar-wrap"
    }, barLabel && jsx_default("div", {
      class: "color-picker-bar-label"
    }, greenLabelText), jsx_default("div", {
      class: "range-slider color-picker-bar color-picker-bar-green"
    }), barValue && jsx_default("div", {
      class: "color-picker-bar-value"
    }, barValueEditable ? jsx_default("input", {
      type: "number",
      step: "1",
      min: "0",
      max: "255",
      class: "color-picker-value-bar-green",
      "data-color-index": "1"
    }) : jsx_default("span", {
      class: "color-picker-value-bar-green"
    }))), jsx_default("div", {
      class: "color-picker-bar-wrap"
    }, barLabel && jsx_default("div", {
      class: "color-picker-bar-label"
    }, blueLabelText), jsx_default("div", {
      class: "range-slider color-picker-bar color-picker-bar-blue"
    }), barValue && jsx_default("div", {
      class: "color-picker-bar-value"
    }, barValueEditable ? jsx_default("input", {
      type: "number",
      step: "1",
      min: "0",
      max: "255",
      class: "color-picker-value-bar-blue",
      "data-color-index": "2"
    }) : jsx_default("span", {
      class: "color-picker-value-bar-blue"
    }))));
  },
  init(self) {
    self.redBar = self.app.range.create({
      el: self.$el.find(".color-picker-bar-red"),
      min: 0,
      max: 255,
      step: 1,
      value: 0,
      vertical: true,
      on: {
        change(range, value) {
          self.setValue({
            rgb: [value, self.value.rgb[1], self.value.rgb[2]]
          });
        }
      }
    });
    self.greenBar = self.app.range.create({
      el: self.$el.find(".color-picker-bar-green"),
      min: 0,
      max: 255,
      step: 1,
      value: 0,
      vertical: true,
      on: {
        change(range, value) {
          self.setValue({
            rgb: [self.value.rgb[0], value, self.value.rgb[2]]
          });
        }
      }
    });
    self.blueBar = self.app.range.create({
      el: self.$el.find(".color-picker-bar-blue"),
      min: 0,
      max: 255,
      step: 1,
      value: 0,
      vertical: true,
      on: {
        change(range, value) {
          self.setValue({
            rgb: [self.value.rgb[0], self.value.rgb[1], value]
          });
        }
      }
    });
    function handleInputChange(e) {
      const rgb = [...self.value.rgb];
      const index = parseInt(dom7_default(e.target).attr("data-color-index"), 10);
      let value = parseInt(e.target.value, 10);
      if (Number.isNaN(value)) {
        e.target.value = rgb[index];
        return;
      }
      value = Math.max(0, Math.min(255, value));
      rgb[index] = value;
      self.setValue({
        rgb
      });
    }
    self.$el.on("change", ".color-picker-module-rgb-bars input", handleInputChange);
    self.destroyRgbBarsEvents = function destroyRgbBarsEvents() {
      self.$el.off("change", ".color-picker-module-rgb-bars input", handleInputChange);
    };
  },
  update(self) {
    const {
      value,
      redBar,
      greenBar,
      blueBar
    } = self;
    const {
      barValue,
      barValueEditable
    } = self.params;
    const {
      rgb
    } = value;
    redBar.value = rgb[0];
    greenBar.value = rgb[1];
    blueBar.value = rgb[2];
    redBar.layout();
    greenBar.layout();
    blueBar.layout();
    redBar.$el.find(".range-bar").css("background-image", `linear-gradient(to top, rgb(0, ${rgb[1]}, ${rgb[2]}), rgb(255, ${rgb[1]}, ${rgb[2]}))`);
    greenBar.$el.find(".range-bar").css("background-image", `linear-gradient(to top, rgb(${rgb[0]}, 0, ${rgb[2]}), rgb(${rgb[0]}, 255, ${rgb[2]}))`);
    blueBar.$el.find(".range-bar").css("background-image", `linear-gradient(to top, rgb(${rgb[0]}, ${rgb[1]}, 0), rgb(${rgb[0]}, ${rgb[1]}, 255))`);
    if (barValue && barValueEditable) {
      self.$el.find("input.color-picker-value-bar-red").val(rgb[0]);
      self.$el.find("input.color-picker-value-bar-green").val(rgb[1]);
      self.$el.find("input.color-picker-value-bar-blue").val(rgb[2]);
    } else if (barValue) {
      self.$el.find("span.color-picker-value-bar-red").text(rgb[0]);
      self.$el.find("span.color-picker-value-bar-green").text(rgb[1]);
      self.$el.find("span.color-picker-value-bar-blue").text(rgb[2]);
    }
  },
  destroy(self) {
    if (self.redBar && self.redBar.destroy) {
      self.redBar.destroy();
    }
    if (self.greenBar && self.greenBar.destroy) {
      self.greenBar.destroy();
    }
    if (self.blueBar && self.blueBar.destroy) {
      self.blueBar.destroy();
    }
    delete self.redBar;
    delete self.greenBar;
    delete self.blueBar;
    if (self.destroyRgbBarsEvents)
      self.destroyRgbBarsEvents();
    delete self.destroyRgbBarsEvents;
  }
};

// node_modules/framework7/components/color-picker/modules/rgb-sliders.js
var rgb_sliders_default = {
  render(self) {
    const {
      sliderLabel,
      sliderValue,
      sliderValueEditable,
      redLabelText,
      greenLabelText,
      blueLabelText
    } = self.params;
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-rgb-sliders"
    }, jsx_default("div", {
      class: "color-picker-slider-wrap"
    }, sliderLabel && jsx_default("div", {
      class: "color-picker-slider-label"
    }, redLabelText), jsx_default("div", {
      class: "range-slider color-picker-slider color-picker-slider-red"
    }), sliderValue && jsx_default("div", {
      class: "color-picker-slider-value"
    }, sliderValueEditable ? jsx_default("input", {
      type: "number",
      step: "1",
      min: "0",
      max: "255",
      class: "color-picker-value-red",
      "data-color-index": "0"
    }) : jsx_default("span", {
      class: "color-picker-value-red"
    }))), jsx_default("div", {
      class: "color-picker-slider-wrap"
    }, sliderLabel && jsx_default("div", {
      class: "color-picker-slider-label"
    }, greenLabelText), jsx_default("div", {
      class: "range-slider color-picker-slider color-picker-slider-green"
    }), sliderValue && jsx_default("div", {
      class: "color-picker-slider-value"
    }, sliderValueEditable ? jsx_default("input", {
      type: "number",
      step: "1",
      min: "0",
      max: "255",
      class: "color-picker-value-green",
      "data-color-index": "1"
    }) : jsx_default("span", {
      class: "color-picker-value-green"
    }))), jsx_default("div", {
      class: "color-picker-slider-wrap"
    }, sliderLabel && jsx_default("div", {
      class: "color-picker-slider-label"
    }, blueLabelText), jsx_default("div", {
      class: "range-slider color-picker-slider color-picker-slider-blue"
    }), sliderValue && jsx_default("div", {
      class: "color-picker-slider-value"
    }, sliderValueEditable ? jsx_default("input", {
      type: "number",
      step: "1",
      min: "0",
      max: "255",
      class: "color-picker-value-blue",
      "data-color-index": "2"
    }) : jsx_default("span", {
      class: "color-picker-value-blue"
    }))));
  },
  init(self) {
    self.redRangeSlider = self.app.range.create({
      el: self.$el.find(".color-picker-slider-red"),
      min: 0,
      max: 255,
      step: 1,
      value: 0,
      on: {
        change(range, value) {
          self.setValue({
            rgb: [value, self.value.rgb[1], self.value.rgb[2]]
          });
        }
      }
    });
    self.greenRangeSlider = self.app.range.create({
      el: self.$el.find(".color-picker-slider-green"),
      min: 0,
      max: 255,
      step: 1,
      value: 0,
      on: {
        change(range, value) {
          self.setValue({
            rgb: [self.value.rgb[0], value, self.value.rgb[2]]
          });
        }
      }
    });
    self.blueRangeSlider = self.app.range.create({
      el: self.$el.find(".color-picker-slider-blue"),
      min: 0,
      max: 255,
      step: 1,
      value: 0,
      on: {
        change(range, value) {
          self.setValue({
            rgb: [self.value.rgb[0], self.value.rgb[1], value]
          });
        }
      }
    });
    function handleInputChange(e) {
      const rgb = [...self.value.rgb];
      const index = parseInt(dom7_default(e.target).attr("data-color-index"), 10);
      let value = parseInt(e.target.value, 10);
      if (Number.isNaN(value)) {
        e.target.value = rgb[index];
        return;
      }
      value = Math.max(0, Math.min(255, value));
      rgb[index] = value;
      self.setValue({
        rgb
      });
    }
    self.$el.on("change", ".color-picker-module-rgb-sliders input", handleInputChange);
    self.destroyRgbSlidersEvents = function destroyRgbSlidersEvents() {
      self.$el.off("change", ".color-picker-module-rgb-sliders input", handleInputChange);
    };
  },
  update(self) {
    const {
      app,
      value,
      redRangeSlider,
      greenRangeSlider,
      blueRangeSlider
    } = self;
    const {
      sliderValue,
      sliderValueEditable
    } = self.params;
    const {
      rgb
    } = value;
    redRangeSlider.value = rgb[0];
    greenRangeSlider.value = rgb[1];
    blueRangeSlider.value = rgb[2];
    redRangeSlider.layout();
    greenRangeSlider.layout();
    blueRangeSlider.layout();
    redRangeSlider.$el[0].style.setProperty("--f7-range-knob-color", `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`);
    greenRangeSlider.$el[0].style.setProperty("--f7-range-knob-color", `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`);
    blueRangeSlider.$el[0].style.setProperty("--f7-range-knob-color", `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`);
    const direction = app.rtl ? "to left" : "to right";
    redRangeSlider.$el.find(".range-bar").css("background-image", `linear-gradient(${direction}, rgb(0, ${rgb[1]}, ${rgb[2]}), rgb(255, ${rgb[1]}, ${rgb[2]}))`);
    greenRangeSlider.$el.find(".range-bar").css("background-image", `linear-gradient(${direction}, rgb(${rgb[0]}, 0, ${rgb[2]}), rgb(${rgb[0]}, 255, ${rgb[2]}))`);
    blueRangeSlider.$el.find(".range-bar").css("background-image", `linear-gradient(${direction}, rgb(${rgb[0]}, ${rgb[1]}, 0), rgb(${rgb[0]}, ${rgb[1]}, 255))`);
    if (sliderValue && sliderValueEditable) {
      self.$el.find("input.color-picker-value-red").val(rgb[0]);
      self.$el.find("input.color-picker-value-green").val(rgb[1]);
      self.$el.find("input.color-picker-value-blue").val(rgb[2]);
    } else if (sliderValue) {
      self.$el.find("span.color-picker-value-red").text(rgb[0]);
      self.$el.find("span.color-picker-value-green").text(rgb[1]);
      self.$el.find("span.color-picker-value-blue").text(rgb[2]);
    }
  },
  destroy(self) {
    if (self.redRangeSlider && self.redRangeSlider.destroy) {
      self.redRangeSlider.destroy();
    }
    if (self.greenRangeSlider && self.greenRangeSlider.destroy) {
      self.greenRangeSlider.destroy();
    }
    if (self.blueRangeSlider && self.blueRangeSlider.destroy) {
      self.blueRangeSlider.destroy();
    }
    delete self.redRangeSlider;
    delete self.greenRangeSlider;
    delete self.blueRangeSlider;
    if (self.destroyRgbSlidersEvents)
      self.destroyRgbSlidersEvents();
    delete self.destroyRgbSlidersEvents;
  }
};

// node_modules/framework7/components/color-picker/modules/sb-spectrum.js
var sb_spectrum_default = {
  render() {
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-sb-spectrum"
    }, jsx_default("div", {
      class: "color-picker-sb-spectrum",
      style: "background-color: hsl(0, 100%, 50%)"
    }, jsx_default("div", {
      class: "color-picker-sb-spectrum-handle"
    })));
  },
  init(self) {
    const {
      app
    } = self;
    let isTouched;
    let isMoved;
    let touchStartX;
    let touchStartY;
    let touchCurrentX;
    let touchCurrentY;
    let specterRect;
    let specterIsTouched;
    let specterHandleIsTouched;
    const {
      $el
    } = self;
    function setSBFromSpecterCoords(x, y) {
      let s = (x - specterRect.left) / specterRect.width;
      let b = (y - specterRect.top) / specterRect.height;
      s = Math.max(0, Math.min(1, s));
      b = 1 - Math.max(0, Math.min(1, b));
      self.setValue({
        hsb: [self.value.hue, s, b]
      });
    }
    function handleTouchStart(e) {
      if (isMoved || isTouched)
        return;
      touchStartX = e.type === "touchstart" ? e.targetTouches[0].pageX : e.pageX;
      touchCurrentX = touchStartX;
      touchStartY = e.type === "touchstart" ? e.targetTouches[0].pageY : e.pageY;
      touchCurrentY = touchStartY;
      const $targetEl = dom7_default(e.target);
      specterHandleIsTouched = $targetEl.closest(".color-picker-sb-spectrum-handle").length > 0;
      if (!specterHandleIsTouched) {
        specterIsTouched = $targetEl.closest(".color-picker-sb-spectrum").length > 0;
      }
      if (specterIsTouched) {
        specterRect = $el.find(".color-picker-sb-spectrum")[0].getBoundingClientRect();
        setSBFromSpecterCoords(touchStartX, touchStartY);
      }
      if (specterHandleIsTouched || specterIsTouched) {
        $el.find(".color-picker-sb-spectrum-handle").addClass("color-picker-sb-spectrum-handle-pressed");
      }
    }
    function handleTouchMove(e) {
      if (!(specterIsTouched || specterHandleIsTouched))
        return;
      touchCurrentX = e.type === "touchmove" ? e.targetTouches[0].pageX : e.pageX;
      touchCurrentY = e.type === "touchmove" ? e.targetTouches[0].pageY : e.pageY;
      e.preventDefault();
      if (!isMoved) {
        isMoved = true;
        if (specterHandleIsTouched) {
          specterRect = $el.find(".color-picker-sb-spectrum")[0].getBoundingClientRect();
        }
      }
      if (specterIsTouched || specterHandleIsTouched) {
        setSBFromSpecterCoords(touchCurrentX, touchCurrentY);
      }
    }
    function handleTouchEnd() {
      isMoved = false;
      if (specterIsTouched || specterHandleIsTouched) {
        $el.find(".color-picker-sb-spectrum-handle").removeClass("color-picker-sb-spectrum-handle-pressed");
      }
      specterIsTouched = false;
      specterHandleIsTouched = false;
    }
    function handleResize() {
      self.modules["sb-spectrum"].update(self);
    }
    const passiveListener = app.touchEvents.start === "touchstart" && getSupport().passiveListener ? {
      passive: true,
      capture: false
    } : false;
    self.$el.on(app.touchEvents.start, handleTouchStart, passiveListener);
    app.on("touchmove:active", handleTouchMove);
    app.on("touchend:passive", handleTouchEnd);
    app.on("resize", handleResize);
    self.destroySpectrumEvents = function destroySpectrumEvents() {
      self.$el.off(app.touchEvents.start, handleTouchStart, passiveListener);
      app.off("touchmove:active", handleTouchMove);
      app.off("touchend:passive", handleTouchEnd);
      app.off("resize", handleResize);
    };
  },
  update(self) {
    const {
      value
    } = self;
    const {
      hsl,
      hsb
    } = value;
    const specterWidth = self.$el.find(".color-picker-sb-spectrum")[0].offsetWidth;
    const specterHeight = self.$el.find(".color-picker-sb-spectrum")[0].offsetHeight;
    self.$el.find(".color-picker-sb-spectrum").css("background-color", `hsl(${hsl[0]}, 100%, 50%)`);
    self.$el.find(".color-picker-sb-spectrum-handle").css("background-color", `hsl(${hsl[0]}, ${hsl[1] * 100}%, ${hsl[2] * 100}%)`).transform(`translate(${specterWidth * hsb[1]}px, ${specterHeight * (1 - hsb[2])}px)`);
  },
  destroy(self) {
    if (self.destroySpectrumEvents)
      self.destroySpectrumEvents();
    delete self.destroySpectrumEvents;
  }
};

// node_modules/framework7/components/color-picker/modules/hs-spectrum.js
var hs_spectrum_default = {
  render() {
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-hs-spectrum"
    }, jsx_default("div", {
      class: "color-picker-hs-spectrum"
    }, jsx_default("div", {
      class: "color-picker-hs-spectrum-handle"
    })));
  },
  init(self) {
    const {
      app
    } = self;
    let isTouched;
    let isMoved;
    let touchStartX;
    let touchStartY;
    let touchCurrentX;
    let touchCurrentY;
    let specterRect;
    let specterIsTouched;
    let specterHandleIsTouched;
    const {
      $el
    } = self;
    function setHSFromSpecterCoords(x, y) {
      let h = (x - specterRect.left) / specterRect.width * 360;
      let s = (y - specterRect.top) / specterRect.height;
      h = Math.max(0, Math.min(360, h));
      s = 1 - Math.max(0, Math.min(1, s));
      self.setValue({
        hsb: [h, s, self.value.hsb[2]]
      });
    }
    function handleTouchStart(e) {
      if (isMoved || isTouched)
        return;
      touchStartX = e.type === "touchstart" ? e.targetTouches[0].pageX : e.pageX;
      touchCurrentX = touchStartX;
      touchStartY = e.type === "touchstart" ? e.targetTouches[0].pageY : e.pageY;
      touchCurrentY = touchStartY;
      const $targetEl = dom7_default(e.target);
      specterHandleIsTouched = $targetEl.closest(".color-picker-hs-spectrum-handle").length > 0;
      if (!specterHandleIsTouched) {
        specterIsTouched = $targetEl.closest(".color-picker-hs-spectrum").length > 0;
      }
      if (specterIsTouched) {
        specterRect = $el.find(".color-picker-hs-spectrum")[0].getBoundingClientRect();
        setHSFromSpecterCoords(touchStartX, touchStartY);
      }
      if (specterHandleIsTouched || specterIsTouched) {
        $el.find(".color-picker-hs-spectrum-handle").addClass("color-picker-hs-spectrum-handle-pressed");
      }
    }
    function handleTouchMove(e) {
      if (!(specterIsTouched || specterHandleIsTouched))
        return;
      touchCurrentX = e.type === "touchmove" ? e.targetTouches[0].pageX : e.pageX;
      touchCurrentY = e.type === "touchmove" ? e.targetTouches[0].pageY : e.pageY;
      e.preventDefault();
      if (!isMoved) {
        isMoved = true;
        if (specterHandleIsTouched) {
          specterRect = $el.find(".color-picker-hs-spectrum")[0].getBoundingClientRect();
        }
      }
      if (specterIsTouched || specterHandleIsTouched) {
        setHSFromSpecterCoords(touchCurrentX, touchCurrentY);
      }
    }
    function handleTouchEnd() {
      isMoved = false;
      if (specterIsTouched || specterHandleIsTouched) {
        $el.find(".color-picker-hs-spectrum-handle").removeClass("color-picker-hs-spectrum-handle-pressed");
      }
      specterIsTouched = false;
      specterHandleIsTouched = false;
    }
    function handleResize() {
      self.modules["hs-spectrum"].update(self);
    }
    const passiveListener = app.touchEvents.start === "touchstart" && getSupport().passiveListener ? {
      passive: true,
      capture: false
    } : false;
    self.$el.on(app.touchEvents.start, handleTouchStart, passiveListener);
    app.on("touchmove:active", handleTouchMove);
    app.on("touchend:passive", handleTouchEnd);
    app.on("resize", handleResize);
    self.destroySpectrumEvents = function destroySpectrumEvents() {
      self.$el.off(app.touchEvents.start, handleTouchStart, passiveListener);
      app.off("touchmove:active", handleTouchMove);
      app.off("touchend:passive", handleTouchEnd);
      app.off("resize", handleResize);
    };
  },
  update(self) {
    const {
      value
    } = self;
    const {
      hsb
    } = value;
    const specterWidth = self.$el.find(".color-picker-hs-spectrum")[0].offsetWidth;
    const specterHeight = self.$el.find(".color-picker-hs-spectrum")[0].offsetHeight;
    const hslBright = colorHsbToHsl(hsb[0], hsb[1], 1);
    self.$el.find(".color-picker-hs-spectrum-handle").css("background-color", `hsl(${hslBright[0]}, ${hslBright[1] * 100}%, ${hslBright[2] * 100}%)`).transform(`translate(${specterWidth * (hsb[0] / 360)}px, ${specterHeight * (1 - hsb[1])}px)`);
  },
  destroy(self) {
    if (self.destroySpectrumEvents)
      self.destroySpectrumEvents();
    delete self.destroySpectrumEvents;
  }
};

// node_modules/framework7/components/color-picker/modules/wheel.js
function svgWheelCircles() {
  const total = 256;
  let circles = "";
  for (let i = total; i > 0; i -= 1) {
    const angle = i * Math.PI / (total / 2);
    const hue = 360 / total * i;
    circles += `<circle cx="${150 - Math.sin(angle) * 125}" cy="${150 - Math.cos(angle) * 125}" r="25" fill="hsl(${hue}, 100%, 50%)"></circle>`;
  }
  return circles;
}
var wheel_default = {
  render() {
    return jsx_default("div", {
      class: "color-picker-module color-picker-module-wheel"
    }, jsx_default("div", {
      class: "color-picker-wheel"
    }, jsx_default("svg", {
      viewBox: "0 0 300 300",
      width: "300",
      height: "300"
    }, svgWheelCircles()), jsx_default("div", {
      class: "color-picker-wheel-handle"
    }), jsx_default("div", {
      class: "color-picker-sb-spectrum",
      style: "background-color: hsl(0, 100%, 50%)"
    }, jsx_default("div", {
      class: "color-picker-sb-spectrum-handle"
    }))));
  },
  init(self) {
    const {
      app
    } = self;
    let isTouched;
    let isMoved;
    let touchStartX;
    let touchStartY;
    let touchCurrentX;
    let touchCurrentY;
    let wheelRect;
    let wheelIsTouched;
    let wheelHandleIsTouched;
    let specterRect;
    let specterIsTouched;
    let specterHandleIsTouched;
    const {
      $el
    } = self;
    function setHueFromWheelCoords(x, y) {
      const wheelCenterX = wheelRect.left + wheelRect.width / 2;
      const wheelCenterY = wheelRect.top + wheelRect.height / 2;
      const angleRad = Math.atan2(y - wheelCenterY, x - wheelCenterX);
      let angleDeg = angleRad * 180 / Math.PI + 90;
      if (angleDeg < 0)
        angleDeg += 360;
      angleDeg = 360 - angleDeg;
      self.setValue({
        hue: angleDeg
      });
    }
    function setSBFromSpecterCoords(x, y) {
      let s = (x - specterRect.left) / specterRect.width;
      let b = (y - specterRect.top) / specterRect.height;
      s = Math.max(0, Math.min(1, s));
      b = 1 - Math.max(0, Math.min(1, b));
      self.setValue({
        hsb: [self.value.hue, s, b]
      });
    }
    function handleTouchStart(e) {
      if (isMoved || isTouched)
        return;
      touchStartX = e.type === "touchstart" ? e.targetTouches[0].pageX : e.pageX;
      touchCurrentX = touchStartX;
      touchStartY = e.type === "touchstart" ? e.targetTouches[0].pageY : e.pageY;
      touchCurrentY = touchStartY;
      const $targetEl = dom7_default(e.target);
      wheelHandleIsTouched = $targetEl.closest(".color-picker-wheel-handle").length > 0;
      wheelIsTouched = $targetEl.closest("circle").length > 0;
      specterHandleIsTouched = $targetEl.closest(".color-picker-sb-spectrum-handle").length > 0;
      if (!specterHandleIsTouched) {
        specterIsTouched = $targetEl.closest(".color-picker-sb-spectrum").length > 0;
      }
      if (wheelIsTouched) {
        wheelRect = $el.find(".color-picker-wheel")[0].getBoundingClientRect();
        setHueFromWheelCoords(touchStartX, touchStartY);
      }
      if (specterIsTouched) {
        specterRect = $el.find(".color-picker-sb-spectrum")[0].getBoundingClientRect();
        setSBFromSpecterCoords(touchStartX, touchStartY);
      }
      if (specterHandleIsTouched || specterIsTouched) {
        $el.find(".color-picker-sb-spectrum-handle").addClass("color-picker-sb-spectrum-handle-pressed");
      }
    }
    function handleTouchMove(e) {
      if (!(wheelIsTouched || wheelHandleIsTouched) && !(specterIsTouched || specterHandleIsTouched))
        return;
      touchCurrentX = e.type === "touchmove" ? e.targetTouches[0].pageX : e.pageX;
      touchCurrentY = e.type === "touchmove" ? e.targetTouches[0].pageY : e.pageY;
      e.preventDefault();
      if (!isMoved) {
        isMoved = true;
        if (wheelHandleIsTouched) {
          wheelRect = $el.find(".color-picker-wheel")[0].getBoundingClientRect();
        }
        if (specterHandleIsTouched) {
          specterRect = $el.find(".color-picker-sb-spectrum")[0].getBoundingClientRect();
        }
      }
      if (wheelIsTouched || wheelHandleIsTouched) {
        setHueFromWheelCoords(touchCurrentX, touchCurrentY);
      }
      if (specterIsTouched || specterHandleIsTouched) {
        setSBFromSpecterCoords(touchCurrentX, touchCurrentY);
      }
    }
    function handleTouchEnd() {
      isMoved = false;
      if (specterIsTouched || specterHandleIsTouched) {
        $el.find(".color-picker-sb-spectrum-handle").removeClass("color-picker-sb-spectrum-handle-pressed");
      }
      wheelIsTouched = false;
      wheelHandleIsTouched = false;
      specterIsTouched = false;
      specterHandleIsTouched = false;
    }
    function handleResize() {
      self.modules.wheel.update(self);
    }
    const passiveListener = app.touchEvents.start === "touchstart" && getSupport().passiveListener ? {
      passive: true,
      capture: false
    } : false;
    self.$el.on(app.touchEvents.start, handleTouchStart, passiveListener);
    app.on("touchmove:active", handleTouchMove);
    app.on("touchend:passive", handleTouchEnd);
    app.on("resize", handleResize);
    self.destroyWheelEvents = function destroyWheelEvents() {
      self.$el.off(app.touchEvents.start, handleTouchStart, passiveListener);
      app.off("touchmove:active", handleTouchMove);
      app.off("touchend:passive", handleTouchEnd);
      app.off("resize", handleResize);
    };
  },
  update(self) {
    const {
      value
    } = self;
    const {
      hsl,
      hsb
    } = value;
    const specterWidth = self.$el.find(".color-picker-sb-spectrum")[0].offsetWidth;
    const specterHeight = self.$el.find(".color-picker-sb-spectrum")[0].offsetHeight;
    const wheelSize = self.$el.find(".color-picker-wheel")[0].offsetWidth;
    const wheelHalfSize = wheelSize / 2;
    const angleRad = value.hue * Math.PI / 180;
    const handleSize = wheelSize / 6;
    const handleHalfSize = handleSize / 2;
    const tX = wheelHalfSize - Math.sin(angleRad) * (wheelHalfSize - handleHalfSize) - handleHalfSize;
    const tY = wheelHalfSize - Math.cos(angleRad) * (wheelHalfSize - handleHalfSize) - handleHalfSize;
    self.$el.find(".color-picker-wheel-handle").css("background-color", `hsl(${hsl[0]}, 100%, 50%)`).transform(`translate(${tX}px, ${tY}px)`);
    self.$el.find(".color-picker-sb-spectrum").css("background-color", `hsl(${hsl[0]}, 100%, 50%)`);
    self.$el.find(".color-picker-sb-spectrum-handle").css("background-color", `hsl(${hsl[0]}, ${hsl[1] * 100}%, ${hsl[2] * 100}%)`).transform(`translate(${specterWidth * hsb[1]}px, ${specterHeight * (1 - hsb[2])}px)`);
  },
  destroy(self) {
    if (self.destroyWheelEvents)
      self.destroyWheelEvents();
    delete self.destroyWheelEvents;
  }
};

// node_modules/framework7/components/color-picker/color-picker-class.js
var ColorPicker = class extends class_default {
  constructor(app, params) {
    if (params === void 0) {
      params = {};
    }
    super(params, [app]);
    const self = this;
    self.params = extend({}, app.params.colorPicker, params);
    let $containerEl;
    if (self.params.containerEl) {
      $containerEl = dom7_default(self.params.containerEl);
      if ($containerEl.length === 0)
        return self;
    }
    let $inputEl;
    if (self.params.inputEl) {
      $inputEl = dom7_default(self.params.inputEl);
    }
    let $targetEl;
    if (self.params.targetEl) {
      $targetEl = dom7_default(self.params.targetEl);
    }
    extend(self, {
      app,
      $containerEl,
      containerEl: $containerEl && $containerEl[0],
      inline: $containerEl && $containerEl.length > 0,
      $inputEl,
      inputEl: $inputEl && $inputEl[0],
      $targetEl,
      targetEl: $targetEl && $targetEl[0],
      initialized: false,
      opened: false,
      url: self.params.url,
      modules: {
        "alpha-slider": alpha_slider_default,
        "current-color": current_color_default,
        hex: hex_default,
        // eslint-disable-line
        "hsb-sliders": hsb_sliders_default,
        "hue-slider": hue_slider_default,
        "brightness-slider": brightness_slider_default,
        palette: palette_default,
        // eslint-disable-line
        "initial-current-colors": initial_current_colors_default,
        "rgb-bars": rgb_bars_default,
        "rgb-sliders": rgb_sliders_default,
        "sb-spectrum": sb_spectrum_default,
        "hs-spectrum": hs_spectrum_default,
        wheel: wheel_default
        // eslint-disable-line
      }
    });
    function onInputClick() {
      self.open();
    }
    function onInputFocus(e) {
      e.preventDefault();
    }
    function onTargetClick() {
      self.open();
    }
    function onHtmlClick(e) {
      if (self.destroyed || !self.params)
        return;
      if (self.params.openIn === "page")
        return;
      const $clickTargetEl = dom7_default(e.target);
      if (!self.opened || self.closing)
        return;
      if ($clickTargetEl.closest('[class*="backdrop"]').length)
        return;
      if ($clickTargetEl.closest(".color-picker-popup, .color-picker-popover").length)
        return;
      if ($inputEl && $inputEl.length > 0) {
        if ($clickTargetEl[0] !== $inputEl[0] && $clickTargetEl.closest(".sheet-modal").length === 0) {
          self.close();
        }
      } else if (dom7_default(e.target).closest(".sheet-modal").length === 0) {
        self.close();
      }
    }
    extend(self, {
      attachInputEvents() {
        self.$inputEl.on("click", onInputClick);
        if (self.params.inputReadOnly) {
          self.$inputEl.on("focus mousedown", onInputFocus);
          if (self.$inputEl[0]) {
            self.$inputEl[0].f7ValidateReadonly = true;
          }
        }
      },
      detachInputEvents() {
        self.$inputEl.off("click", onInputClick);
        if (self.params.inputReadOnly) {
          self.$inputEl.off("focus mousedown", onInputFocus);
          if (self.$inputEl[0]) {
            delete self.$inputEl[0].f7ValidateReadonly;
          }
        }
      },
      attachTargetEvents() {
        self.$targetEl.on("click", onTargetClick);
      },
      detachTargetEvents() {
        self.$targetEl.off("click", onTargetClick);
      },
      attachHtmlEvents() {
        app.on("click", onHtmlClick);
      },
      detachHtmlEvents() {
        app.off("click", onHtmlClick);
      }
    });
    self.init();
    return self;
  }
  get view() {
    const {
      $inputEl,
      $targetEl,
      app,
      params
    } = this;
    let view;
    if (params.view) {
      view = params.view;
    } else {
      if ($inputEl) {
        view = $inputEl.parents(".view").length && $inputEl.parents(".view")[0].f7View;
      }
      if (!view && $targetEl) {
        view = $targetEl.parents(".view").length && $targetEl.parents(".view")[0].f7View;
      }
    }
    if (!view)
      view = app.views.main;
    return view;
  }
  attachEvents() {
    const self = this;
    self.centerModules = self.centerModules.bind(self);
    if (self.params.centerModules) {
      self.app.on("resize", self.centerModules);
    }
  }
  detachEvents() {
    const self = this;
    if (self.params.centerModules) {
      self.app.off("resize", self.centerModules);
    }
  }
  centerModules() {
    const self = this;
    if (!self.opened || !self.$el || self.inline)
      return;
    const $pageContentEl = self.$el.find(".page-content");
    if (!$pageContentEl.length)
      return;
    const {
      scrollHeight,
      offsetHeight
    } = $pageContentEl[0];
    if (scrollHeight <= offsetHeight) {
      $pageContentEl.addClass("justify-content-center");
    } else {
      $pageContentEl.removeClass("justify-content-center");
    }
  }
  initInput() {
    const self = this;
    if (!self.$inputEl)
      return;
    if (self.params.inputReadOnly)
      self.$inputEl.prop("readOnly", true);
  }
  getModalType() {
    const self = this;
    const {
      app,
      modal,
      params
    } = self;
    const {
      openIn,
      openInPhone
    } = params;
    const device = getDevice();
    if (modal && modal.type)
      return modal.type;
    if (openIn !== "auto")
      return openIn;
    if (self.inline)
      return null;
    if (device.ios) {
      return device.ipad ? "popover" : openInPhone;
    }
    if (app.width >= 768) {
      return "popover";
    }
    return openInPhone;
  }
  formatValue() {
    const self = this;
    const {
      value
    } = self;
    if (self.params.formatValue) {
      return self.params.formatValue.call(self, value);
    }
    return value.hex;
  }
  // eslint-disable-next-line
  normalizeHsValues(arr) {
    return [Math.floor(arr[0] * 10) / 10, Math.floor(arr[1] * 1e3) / 1e3, Math.floor(arr[2] * 1e3) / 1e3];
  }
  setValue(value, updateModules) {
    if (value === void 0) {
      value = {};
    }
    if (updateModules === void 0) {
      updateModules = true;
    }
    const self = this;
    if (typeof value === "undefined")
      return;
    let {
      hex,
      rgb,
      hsl,
      hsb,
      alpha = 1,
      hue,
      rgba,
      hsla
    } = self.value || {};
    const needChangeEvent = self.value || !self.value && !self.params.value;
    let valueChanged;
    Object.keys(value).forEach((k) => {
      if (!self.value || typeof self.value[k] === "undefined") {
        valueChanged = true;
        return;
      }
      const v = value[k];
      if (Array.isArray(v)) {
        v.forEach((subV, subIndex) => {
          if (subV !== self.value[k][subIndex]) {
            valueChanged = true;
          }
        });
      } else if (v !== self.value[k]) {
        valueChanged = true;
      }
    });
    if (!valueChanged)
      return;
    if (value.rgb || value.rgba) {
      const [r, g, b, a = alpha] = value.rgb || value.rgba;
      rgb = [r, g, b];
      hex = colorRgbToHex(...rgb);
      hsl = colorRgbToHsl(...rgb);
      hsb = colorHslToHsb(...hsl);
      hsl = self.normalizeHsValues(hsl);
      hsb = self.normalizeHsValues(hsb);
      hue = hsb[0];
      alpha = a;
      rgba = [rgb[0], rgb[1], rgb[2], a];
      hsla = [hsl[0], hsl[1], hsl[2], a];
    }
    if (value.hsl || value.hsla) {
      const [h, s, l, a = alpha] = value.hsl || value.hsla;
      hsl = [h, s, l];
      rgb = colorHslToRgb(...hsl);
      hex = colorRgbToHex(...rgb);
      hsb = colorHslToHsb(...hsl);
      hsl = self.normalizeHsValues(hsl);
      hsb = self.normalizeHsValues(hsb);
      hue = hsb[0];
      alpha = a;
      rgba = [rgb[0], rgb[1], rgb[2], a];
      hsla = [hsl[0], hsl[1], hsl[2], a];
    }
    if (value.hsb) {
      const [h, s, b, a = alpha] = value.hsb;
      hsb = [h, s, b];
      hsl = colorHsbToHsl(...hsb);
      rgb = colorHslToRgb(...hsl);
      hex = colorRgbToHex(...rgb);
      hsl = self.normalizeHsValues(hsl);
      hsb = self.normalizeHsValues(hsb);
      hue = hsb[0];
      alpha = a;
      rgba = [rgb[0], rgb[1], rgb[2], a];
      hsla = [hsl[0], hsl[1], hsl[2], a];
    }
    if (value.hex) {
      rgb = colorHexToRgb(value.hex);
      hex = colorRgbToHex(...rgb);
      hsl = colorRgbToHsl(...rgb);
      hsb = colorHslToHsb(...hsl);
      hsl = self.normalizeHsValues(hsl);
      hsb = self.normalizeHsValues(hsb);
      hue = hsb[0];
      rgba = [rgb[0], rgb[1], rgb[2], alpha];
      hsla = [hsl[0], hsl[1], hsl[2], alpha];
    }
    if (typeof value.alpha !== "undefined") {
      alpha = value.alpha;
      if (typeof rgb !== "undefined") {
        rgba = [rgb[0], rgb[1], rgb[2], alpha];
      }
      if (typeof hsl !== "undefined") {
        hsla = [hsl[0], hsl[1], hsl[2], alpha];
      }
    }
    if (typeof value.hue !== "undefined") {
      const [h, s, l] = hsl;
      hsl = [value.hue, s, l];
      hsb = colorHslToHsb(...hsl);
      rgb = colorHslToRgb(...hsl);
      hex = colorRgbToHex(...rgb);
      hsl = self.normalizeHsValues(hsl);
      hsb = self.normalizeHsValues(hsb);
      hue = hsb[0];
      rgba = [rgb[0], rgb[1], rgb[2], alpha];
      hsla = [hsl[0], hsl[1], hsl[2], alpha];
    }
    self.value = {
      hex,
      alpha,
      hue,
      rgb,
      hsl,
      hsb,
      rgba,
      hsla
    };
    if (!self.initialValue)
      self.initialValue = extend({}, self.value);
    self.updateValue(needChangeEvent);
    if (self.opened && updateModules) {
      self.updateModules();
    }
  }
  getValue() {
    const self = this;
    return self.value;
  }
  updateValue(fireEvents) {
    if (fireEvents === void 0) {
      fireEvents = true;
    }
    const self = this;
    const {
      $inputEl,
      value,
      $targetEl
    } = self;
    if ($targetEl && self.params.targetElSetBackgroundColor) {
      const {
        rgba
      } = value;
      $targetEl.css("background-color", `rgba(${rgba.join(", ")})`);
    }
    if (fireEvents) {
      self.emit("local::change colorPickerChange", self, value);
    }
    if ($inputEl && $inputEl.length) {
      const inputValue = self.formatValue(value);
      if ($inputEl && $inputEl.length) {
        $inputEl.val(inputValue);
        if (fireEvents) {
          $inputEl.trigger("change");
        }
      }
    }
  }
  updateModules() {
    const self = this;
    const {
      modules
    } = self;
    self.params.modules.forEach((m) => {
      if (typeof m === "string" && modules[m] && modules[m].update) {
        modules[m].update(self);
      } else if (m && m.update) {
        m.update(self);
      }
    });
  }
  update() {
    const self = this;
    self.updateModules();
  }
  renderPicker() {
    const self = this;
    const {
      params,
      modules
    } = self;
    let html = "";
    params.modules.forEach((m) => {
      if (typeof m === "string" && modules[m] && modules[m].render) {
        html += modules[m].render(self);
      } else if (m && m.render) {
        html += m.render(self);
      }
    });
    return html;
  }
  renderNavbar() {
    const self = this;
    if (self.params.renderNavbar) {
      return self.params.renderNavbar.call(self, self);
    }
    const {
      openIn,
      navbarTitleText,
      navbarBackLinkText,
      navbarCloseText
    } = self.params;
    return jsx_default("div", {
      class: "navbar"
    }, jsx_default("div", {
      class: "navbar-bg"
    }), jsx_default("div", {
      class: "navbar-inner sliding"
    }, openIn === "page" && jsx_default("div", {
      class: "left"
    }, jsx_default("a", {
      class: "link back"
    }, jsx_default("i", {
      class: "icon icon-back"
    }), jsx_default("span", {
      class: "if-not-md"
    }, navbarBackLinkText))), jsx_default("div", {
      class: "title"
    }, navbarTitleText), openIn !== "page" && jsx_default("div", {
      class: "right"
    }, jsx_default("a", {
      class: "link popup-close",
      "data-popup": ".color-picker-popup"
    }, navbarCloseText))));
  }
  renderToolbar() {
    const self = this;
    if (self.params.renderToolbar) {
      return self.params.renderToolbar.call(self, self);
    }
    return jsx_default("div", {
      class: "toolbar toolbar-top"
    }, jsx_default("div", {
      class: "toolbar-inner"
    }, jsx_default("div", {
      class: "left"
    }), jsx_default("div", {
      class: "right"
    }, jsx_default("a", {
      class: "link sheet-close popover-close",
      "data-sheet": ".color-picker-sheet-modal",
      "data-popover": ".color-picker-popover"
    }, self.params.toolbarCloseText))));
  }
  renderInline() {
    const self = this;
    const {
      cssClass,
      groupedModules
    } = self.params;
    return jsx_default("div", {
      class: `color-picker color-picker-inline ${groupedModules ? "color-picker-grouped-modules" : ""} ${cssClass || ""}`
    }, self.renderPicker());
  }
  renderSheet() {
    const self = this;
    const {
      cssClass,
      toolbarSheet,
      groupedModules
    } = self.params;
    return jsx_default("div", {
      class: `sheet-modal color-picker color-picker-sheet-modal ${groupedModules ? "color-picker-grouped-modules" : ""} ${cssClass || ""}`
    }, toolbarSheet && self.renderToolbar(), jsx_default("div", {
      class: "sheet-modal-inner"
    }, jsx_default("div", {
      class: "page-content"
    }, self.renderPicker())));
  }
  renderPopover() {
    const self = this;
    const {
      cssClass,
      toolbarPopover,
      groupedModules
    } = self.params;
    return jsx_default("div", {
      class: `popover color-picker-popover ${cssClass || ""}`
    }, jsx_default("div", {
      class: "popover-inner"
    }, jsx_default("div", {
      class: `color-picker ${groupedModules ? "color-picker-grouped-modules" : ""}`
    }, toolbarPopover && self.renderToolbar(), jsx_default("div", {
      class: "page-content"
    }, self.renderPicker()))));
  }
  renderPopup() {
    const self = this;
    const {
      cssClass,
      navbarPopup,
      groupedModules
    } = self.params;
    return jsx_default("div", {
      class: `popup color-picker-popup ${cssClass || ""}`
    }, jsx_default("div", {
      class: "page"
    }, navbarPopup && self.renderNavbar(), jsx_default("div", {
      class: `color-picker ${groupedModules ? "color-picker-grouped-modules" : ""}`
    }, jsx_default("div", {
      class: "page-content"
    }, self.renderPicker()))));
  }
  renderPage() {
    const self = this;
    const {
      cssClass,
      groupedModules
    } = self.params;
    return jsx_default("div", {
      class: `page color-picker-page ${cssClass || ""}`,
      "data-name": "color-picker-page"
    }, self.renderNavbar(), jsx_default("div", {
      class: `color-picker ${groupedModules ? "color-picker-grouped-modules" : ""}`
    }, jsx_default("div", {
      class: "page-content"
    }, self.renderPicker())));
  }
  // eslint-disable-next-line
  render() {
    const self = this;
    const {
      params
    } = self;
    if (params.render)
      return params.render.call(self);
    if (self.inline)
      return self.renderInline();
    if (params.openIn === "page") {
      return self.renderPage();
    }
    const modalType = self.getModalType();
    if (modalType === "popover")
      return self.renderPopover();
    if (modalType === "sheet")
      return self.renderSheet();
    if (modalType === "popup")
      return self.renderPopup();
  }
  onOpen() {
    const self = this;
    const {
      initialized,
      $el,
      app,
      $inputEl,
      inline,
      value,
      params,
      modules
    } = self;
    self.closing = false;
    self.opened = true;
    self.opening = true;
    self.attachEvents();
    params.modules.forEach((m) => {
      if (typeof m === "string" && modules[m] && modules[m].init) {
        modules[m].init(self);
      } else if (m && m.init) {
        m.init(self);
      }
    });
    const updateValue = !value && params.value;
    if (!initialized) {
      if (value)
        self.setValue(value);
      else if (params.value) {
        self.setValue(params.value, false);
      } else if (!params.value) {
        self.setValue({
          hex: "#ff0000"
        }, false);
      }
    } else if (value) {
      self.initialValue = extend({}, value);
      self.setValue(value, false);
    }
    if (updateValue)
      self.updateValue();
    self.updateModules();
    if (params.centerModules) {
      self.centerModules();
    }
    if (!inline && $inputEl && $inputEl.length && app.theme === "md") {
      $inputEl.trigger("focus");
    }
    self.initialized = true;
    if ($el) {
      $el.trigger("colorpicker:open");
    }
    if ($inputEl) {
      $inputEl.trigger("colorpicker:open");
    }
    self.emit("local::open colorPickerOpen", self);
  }
  onOpened() {
    const self = this;
    self.opening = false;
    if (self.$el) {
      self.$el.trigger("colorpicker:opened");
    }
    if (self.$inputEl) {
      self.$inputEl.trigger("colorpicker:opened");
    }
    self.emit("local::opened colorPickerOpened", self);
  }
  onClose() {
    const self = this;
    const {
      app,
      params,
      modules
    } = self;
    self.opening = false;
    self.closing = true;
    self.detachEvents();
    if (self.$inputEl) {
      if (app.theme === "md") {
        self.$inputEl.trigger("blur");
      } else {
        const validate = self.$inputEl.attr("validate");
        const required = self.$inputEl.attr("required");
        if (validate && required) {
          app.input.validate(self.$inputEl);
        }
      }
    }
    params.modules.forEach((m) => {
      if (typeof m === "string" && modules[m] && modules[m].destroy) {
        modules[m].destroy(self);
      } else if (m && m.destroy) {
        m.destroy(self);
      }
    });
    if (self.$el) {
      self.$el.trigger("colorpicker:close");
    }
    if (self.$inputEl) {
      self.$inputEl.trigger("colorpicker:close");
    }
    self.emit("local::close colorPickerClose", self);
  }
  onClosed() {
    const self = this;
    self.opened = false;
    self.closing = false;
    if (!self.inline) {
      nextTick(() => {
        if (self.modal && self.modal.el && self.modal.destroy) {
          if (!self.params.routableModals) {
            self.modal.destroy();
          }
        }
        delete self.modal;
      });
    }
    if (self.$el) {
      self.$el.trigger("colorpicker:closed");
    }
    if (self.$inputEl) {
      self.$inputEl.trigger("colorpicker:closed");
    }
    self.emit("local::closed colorPickerClosed", self);
  }
  open() {
    const self = this;
    const {
      app,
      opened,
      inline,
      $inputEl,
      $targetEl,
      params
    } = self;
    if (opened)
      return;
    if (inline) {
      self.$el = dom7_default(self.render());
      self.$el[0].f7ColorPicker = self;
      self.$containerEl.append(self.$el);
      self.onOpen();
      self.onOpened();
      return;
    }
    const colorPickerContent = self.render();
    if (params.openIn === "page") {
      self.view.router.navigate({
        url: self.url,
        route: {
          content: colorPickerContent,
          path: self.url,
          on: {
            pageBeforeIn(e, page) {
              self.$el = page.$el.find(".color-picker");
              self.$el[0].f7ColorPicker = self;
              self.onOpen();
            },
            pageAfterIn() {
              self.onOpened();
            },
            pageBeforeOut() {
              self.onClose();
            },
            pageAfterOut() {
              self.onClosed();
              if (self.$el && self.$el[0]) {
                self.$el[0].f7ColorPicker = null;
                delete self.$el[0].f7ColorPicker;
              }
            }
          }
        }
      });
    } else {
      const modalType = self.getModalType();
      let backdrop = params.backdrop;
      if (backdrop === null || typeof backdrop === "undefined") {
        if (modalType === "popover" && app.params.popover.backdrop !== false)
          backdrop = true;
        if (modalType === "popup")
          backdrop = true;
      }
      const modalParams = {
        targetEl: $targetEl || $inputEl,
        scrollToEl: params.scrollToInput ? $targetEl || $inputEl : void 0,
        content: colorPickerContent,
        backdrop,
        closeByBackdropClick: params.closeByBackdropClick,
        on: {
          open() {
            const modal = this;
            self.modal = modal;
            self.$el = modalType === "popover" || modalType === "popup" ? modal.$el.find(".color-picker") : modal.$el;
            self.$el[0].f7ColorPicker = self;
            self.onOpen();
          },
          opened() {
            self.onOpened();
          },
          close() {
            self.onClose();
          },
          closed() {
            self.onClosed();
            if (self.$el && self.$el[0]) {
              self.$el[0].f7ColorPicker = null;
              delete self.$el[0].f7ColorPicker;
            }
          }
        }
      };
      if (modalType === "popup") {
        modalParams.push = params.popupPush;
        modalParams.swipeToClose = params.popupSwipeToClose;
      }
      if (modalType === "sheet") {
        modalParams.push = params.sheetPush;
        modalParams.swipeToClose = params.sheetSwipeToClose;
      }
      if (params.routableModals && self.view) {
        self.view.router.navigate({
          url: self.url,
          route: {
            path: self.url,
            [modalType]: modalParams
          }
        });
      } else {
        self.modal = app[modalType].create(modalParams);
        self.modal.open();
      }
    }
  }
  close() {
    const self = this;
    const {
      opened,
      inline
    } = self;
    if (!opened)
      return;
    if (inline) {
      self.onClose();
      self.onClosed();
      return;
    }
    if (self.params.routableModals && self.view || self.params.openIn === "page") {
      self.view.router.back();
    } else {
      self.modal.close();
    }
  }
  init() {
    const self = this;
    self.initInput();
    if (self.inline) {
      self.open();
      self.emit("local::init colorPickerInit", self);
      return;
    }
    if (!self.initialized && self.params.value) {
      self.setValue(self.params.value);
    }
    if (self.$inputEl) {
      self.attachInputEvents();
    }
    if (self.$targetEl) {
      self.attachTargetEvents();
    }
    if (self.params.closeByOutsideClick) {
      self.attachHtmlEvents();
    }
    self.emit("local::init colorPickerInit", self);
  }
  destroy() {
    const self = this;
    if (self.destroyed)
      return;
    const {
      $el
    } = self;
    self.emit("local::beforeDestroy colorPickerBeforeDestroy", self);
    if ($el)
      $el.trigger("colorpicker:beforedestroy");
    self.close();
    self.detachEvents();
    if (self.$inputEl) {
      self.detachInputEvents();
    }
    if (self.$targetEl) {
      self.detachTargetEvents();
    }
    if (self.params.closeByOutsideClick) {
      self.detachHtmlEvents();
    }
    if ($el && $el.length)
      delete self.$el[0].f7ColorPicker;
    deleteProps(self);
    self.destroyed = true;
  }
};
var color_picker_class_default = ColorPicker;

// node_modules/framework7/components/color-picker/color-picker.js
var color_picker_default = {
  name: "colorPicker",
  static: {
    ColorPicker: color_picker_class_default
  },
  create() {
    const app = this;
    app.colorPicker = ConstructorMethods({
      defaultSelector: ".color-picker",
      constructor: color_picker_class_default,
      app,
      domProp: "f7ColorPicker"
    });
    app.colorPicker.close = function close(el) {
      if (el === void 0) {
        el = ".color-picker";
      }
      const $el = dom7_default(el);
      if ($el.length === 0)
        return;
      const colorPicker = $el[0].f7ColorPicker;
      if (!colorPicker || colorPicker && !colorPicker.opened)
        return;
      colorPicker.close();
    };
  },
  params: {
    colorPicker: {
      // Color picker settings
      value: null,
      modules: ["wheel"],
      palette: [["#FFEBEE", "#FFCDD2", "#EF9A9A", "#E57373", "#EF5350", "#F44336", "#E53935", "#D32F2F", "#C62828", "#B71C1C"], ["#F3E5F5", "#E1BEE7", "#CE93D8", "#BA68C8", "#AB47BC", "#9C27B0", "#8E24AA", "#7B1FA2", "#6A1B9A", "#4A148C"], ["#E8EAF6", "#C5CAE9", "#9FA8DA", "#7986CB", "#5C6BC0", "#3F51B5", "#3949AB", "#303F9F", "#283593", "#1A237E"], ["#E1F5FE", "#B3E5FC", "#81D4FA", "#4FC3F7", "#29B6F6", "#03A9F4", "#039BE5", "#0288D1", "#0277BD", "#01579B"], ["#E0F2F1", "#B2DFDB", "#80CBC4", "#4DB6AC", "#26A69A", "#009688", "#00897B", "#00796B", "#00695C", "#004D40"], ["#F1F8E9", "#DCEDC8", "#C5E1A5", "#AED581", "#9CCC65", "#8BC34A", "#7CB342", "#689F38", "#558B2F", "#33691E"], ["#FFFDE7", "#FFF9C4", "#FFF59D", "#FFF176", "#FFEE58", "#FFEB3B", "#FDD835", "#FBC02D", "#F9A825", "#F57F17"], ["#FFF3E0", "#FFE0B2", "#FFCC80", "#FFB74D", "#FFA726", "#FF9800", "#FB8C00", "#F57C00", "#EF6C00", "#E65100"]],
      groupedModules: false,
      centerModules: true,
      sliderLabel: false,
      sliderValue: false,
      sliderValueEdiable: false,
      barLabel: false,
      barValue: false,
      barValueEdiable: false,
      hexLabel: false,
      hexValueEditable: false,
      redLabelText: "R",
      greenLabelText: "G",
      blueLabelText: "B",
      hueLabelText: "H",
      saturationLabelText: "S",
      brightnessLabelText: "B",
      hexLabelText: "HEX",
      alphaLabelText: "A",
      // Common opener settings
      containerEl: null,
      openIn: "popover",
      // or 'popover' or 'sheet' or 'popup' or 'page' or 'auto'
      openInPhone: "popup",
      // or 'popover' or 'sheet' or 'popup' or 'page'
      popupPush: false,
      popupSwipeToClose: void 0,
      sheetPush: false,
      sheetSwipeToClose: void 0,
      formatValue: null,
      targetEl: null,
      targetElSetBackgroundColor: false,
      inputEl: null,
      inputReadOnly: true,
      closeByOutsideClick: true,
      scrollToInput: true,
      toolbarSheet: true,
      toolbarPopover: false,
      toolbarCloseText: "Done",
      navbarPopup: true,
      navbarCloseText: "Done",
      navbarTitleText: "Color",
      navbarBackLinkText: "Back",
      cssClass: null,
      routableModals: false,
      view: null,
      url: "color/",
      backdrop: null,
      closeByBackdropClick: true,
      // Render functions
      renderToolbar: null,
      renderNavbar: null,
      renderInline: null,
      renderPopover: null,
      renderSheet: null,
      renderPopup: null,
      render: null
    }
  }
};
export {
  color_picker_default as default
};
//# sourceMappingURL=framework7_components_color-picker.js.map
