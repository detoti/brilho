import {
  ConstructorMethods
} from "./chunk-JWL65P4K.js";
import {
  class_default
} from "./chunk-GBDLSSFZ.js";
import {
  dom7_default
} from "./chunk-GWMKRGKK.js";
import {
  deleteProps,
  extend
} from "./chunk-UUGCU45C.js";
import "./chunk-PRZ7VHHA.js";
import "./chunk-ZS7NZCD4.js";

// node_modules/framework7/components/data-table/data-table-class.js
var DataTable = class extends class_default {
  constructor(app, params) {
    if (params === void 0) {
      params = {};
    }
    super(params, [app]);
    const table = this;
    const defaults = {};
    table.useModulesParams(defaults);
    table.params = extend(defaults, params);
    const $el = dom7_default(table.params.el);
    if ($el.length === 0)
      return void 0;
    table.$el = $el;
    table.el = $el[0];
    if (table.$el[0].f7DataTable) {
      const instance = table.$el[0].f7DataTable;
      table.destroy();
      return instance;
    }
    table.$el[0].f7DataTable = table;
    extend(table, {
      collapsible: $el.hasClass("data-table-collapsible"),
      // Headers
      $headerEl: $el.find(".data-table-header"),
      $headerSelectedEl: $el.find(".data-table-header-selected")
    });
    function handleChange(e) {
      if (e.detail && e.detail.sentByF7DataTable) {
        return;
      }
      const $inputEl = dom7_default(this);
      const checked = $inputEl[0].checked;
      const columnIndex = $inputEl.parents("td,th").index();
      if ($inputEl.parents("thead").length > 0) {
        if (columnIndex === 0) {
          $el.find("tbody tr")[checked ? "addClass" : "removeClass"]("data-table-row-selected");
        }
        $el.find(`tbody tr td:nth-child(${columnIndex + 1}) input`).prop("checked", checked).trigger("change", {
          sentByF7DataTable: true
        });
        $inputEl.prop("indeterminate", false);
      } else {
        if (columnIndex === 0) {
          $inputEl.parents("tr")[checked ? "addClass" : "removeClass"]("data-table-row-selected");
        }
        const checkedRows = $el.find(`tbody .checkbox-cell:nth-child(${columnIndex + 1}) input[type="checkbox"]:checked`).length;
        const totalRows = $el.find("tbody tr").length;
        const $headCheckboxEl = $el.find(`thead .checkbox-cell:nth-child(${columnIndex + 1}) input[type="checkbox"]`);
        if (!checked) {
          $headCheckboxEl.prop("checked", false);
        } else if (checkedRows === totalRows) {
          $headCheckboxEl.prop("checked", true).trigger("change", {
            sentByF7DataTable: true
          });
        }
        $headCheckboxEl.prop("indeterminate", checkedRows > 0 && checkedRows < totalRows);
      }
      table.checkSelectedHeader();
    }
    function handleSortableClick() {
      const $cellEl = dom7_default(this);
      const isActive = $cellEl.hasClass("sortable-cell-active");
      const currentSort = $cellEl.hasClass("sortable-desc") ? "desc" : "asc";
      let newSort;
      if (isActive) {
        newSort = currentSort === "desc" ? "asc" : "desc";
        $cellEl.removeClass("sortable-desc sortable-asc").addClass(`sortable-${newSort}`);
      } else {
        $el.find("thead .sortable-cell-active").removeClass("sortable-cell-active");
        $cellEl.addClass("sortable-cell-active");
        newSort = currentSort;
      }
      $cellEl.trigger("datatable:sort", newSort);
      table.emit("local::sort dataTableSort", table, newSort);
    }
    table.attachEvents = function attachEvents() {
      table.$el.on("change", '.checkbox-cell input[type="checkbox"]', handleChange);
      table.$el.find("thead .sortable-cell").on("click", handleSortableClick);
    };
    table.detachEvents = function detachEvents() {
      table.$el.off("change", '.checkbox-cell input[type="checkbox"]', handleChange);
      table.$el.find("thead .sortable-cell").off("click", handleSortableClick);
    };
    table.useModules();
    table.init();
    return table;
  }
  setCollapsibleLabels() {
    const table = this;
    if (!table.collapsible)
      return;
    table.$el.find("tbody td:not(.checkbox-cell)").each((el) => {
      const $el = dom7_default(el);
      const elIndex = $el.index();
      const collapsibleTitle = $el.attr("data-collapsible-title");
      if (!collapsibleTitle && collapsibleTitle !== "") {
        $el.attr("data-collapsible-title", table.$el.find("thead th").eq(elIndex).text());
      }
    });
  }
  checkSelectedHeader() {
    const table = this;
    if (table.$headerEl.length > 0 && table.$headerSelectedEl.length > 0) {
      const checkedItems = table.$el.find("tbody .checkbox-cell input:checked").length;
      table.$el[checkedItems > 0 ? "addClass" : "removeClass"]("data-table-has-checked");
      table.$headerSelectedEl.find(".data-table-selected-count").text(checkedItems);
    }
  }
  init() {
    const table = this;
    table.attachEvents();
    table.setCollapsibleLabels();
    table.checkSelectedHeader();
  }
  destroy() {
    let table = this;
    table.$el.trigger("datatable:beforedestroy");
    table.emit("local::beforeDestroy dataTableBeforeDestroy", table);
    table.detachEvents();
    if (table.$el[0]) {
      table.$el[0].f7DataTable = null;
      delete table.$el[0].f7DataTable;
    }
    deleteProps(table);
    table = null;
  }
};
var data_table_class_default = DataTable;

// node_modules/framework7/components/data-table/data-table.js
var data_table_default = {
  name: "dataTable",
  static: {
    DataTable: data_table_class_default
  },
  create() {
    const app = this;
    app.dataTable = ConstructorMethods({
      defaultSelector: ".data-table",
      constructor: data_table_class_default,
      app,
      domProp: "f7DataTable"
    });
  },
  on: {
    tabBeforeRemove(tabEl) {
      const app = this;
      dom7_default(tabEl).find(".data-table-init").each((tableEl) => {
        app.dataTable.destroy(tableEl);
      });
    },
    tabMounted(tabEl) {
      const app = this;
      dom7_default(tabEl).find(".data-table-init").each((tableEl) => {
        app.dataTable.create({
          el: tableEl
        });
      });
    },
    pageBeforeRemove(page) {
      const app = this;
      page.$el.find(".data-table-init").each((tableEl) => {
        app.dataTable.destroy(tableEl);
      });
    },
    pageInit(page) {
      const app = this;
      page.$el.find(".data-table-init").each((tableEl) => {
        app.dataTable.create({
          el: tableEl
        });
      });
    }
  },
  vnode: {
    "data-table-init": {
      insert(vnode) {
        const app = this;
        const tableEl = vnode.elm;
        app.dataTable.create({
          el: tableEl
        });
      },
      destroy(vnode) {
        const app = this;
        const tableEl = vnode.elm;
        app.dataTable.destroy(tableEl);
      }
    }
  }
};
export {
  data_table_default as default
};
//# sourceMappingURL=framework7_components_data-table.js.map
