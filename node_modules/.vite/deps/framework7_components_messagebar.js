import {
  ConstructorMethods
} from "./chunk-JWL65P4K.js";
import {
  class_default
} from "./chunk-GBDLSSFZ.js";
import {
  dom7_default
} from "./chunk-GWMKRGKK.js";
import {
  deleteProps,
  extend
} from "./chunk-UUGCU45C.js";
import "./chunk-PRZ7VHHA.js";
import "./chunk-ZS7NZCD4.js";

// node_modules/framework7/components/messagebar/messagebar-class.js
var Messagebar = class extends class_default {
  constructor(app, params) {
    if (params === void 0) {
      params = {};
    }
    super(params, [app]);
    const messagebar = this;
    const defaults = {
      top: false,
      topOffset: 0,
      bottomOffset: 0,
      attachments: [],
      renderAttachments: void 0,
      renderAttachment: void 0,
      maxHeight: null,
      resizePage: true
    };
    messagebar.useModulesParams(defaults);
    messagebar.params = extend(defaults, params);
    const $el = dom7_default(messagebar.params.el);
    if ($el.length === 0)
      return messagebar;
    if ($el[0].f7Messagebar)
      return $el[0].f7Messagebar;
    $el[0].f7Messagebar = messagebar;
    const $pageEl = $el.parents(".page").eq(0);
    const $pageContentEl = $pageEl.find(".page-content").eq(0);
    const $areaEl = $el.find(".messagebar-area");
    let $textareaEl;
    if (messagebar.params.textareaEl) {
      $textareaEl = dom7_default(messagebar.params.textareaEl);
    } else {
      $textareaEl = $el.find("textarea");
    }
    const $attachmentsEl = $el.find(".messagebar-attachments");
    const $sheetEl = $el.find(".messagebar-sheet");
    if (messagebar.params.top) {
      $el.addClass("messagebar-top");
    }
    extend(messagebar, {
      $el,
      el: $el[0],
      $areaEl,
      areaEl: $areaEl[0],
      $textareaEl,
      textareaEl: $textareaEl[0],
      $attachmentsEl,
      attachmentsEl: $attachmentsEl[0],
      attachmentsVisible: $attachmentsEl.hasClass("messagebar-attachments-visible"),
      $sheetEl,
      sheetEl: $sheetEl[0],
      sheetVisible: $sheetEl.hasClass("messagebar-sheet-visible"),
      $pageEl,
      pageEl: $pageEl[0],
      $pageContentEl,
      pageContentEl: $pageContentEl,
      top: $el.hasClass("messagebar-top") || messagebar.params.top,
      attachments: []
    });
    function onAppResize() {
      if (messagebar.params.resizePage) {
        messagebar.resizePage();
      }
    }
    function onSubmit(e) {
      e.preventDefault();
    }
    function onAttachmentClick(e) {
      const index = dom7_default(this).index();
      if (dom7_default(e.target).closest(".messagebar-attachment-delete").length) {
        dom7_default(this).trigger("messagebar:attachmentdelete", index);
        messagebar.emit("local::attachmentDelete messagebarAttachmentDelete", messagebar, this, index);
      } else {
        dom7_default(this).trigger("messagebar:attachmentclick", index);
        messagebar.emit("local::attachmentClick messagebarAttachmentClick", messagebar, this, index);
      }
    }
    function onTextareaChange() {
      messagebar.checkEmptyState();
      messagebar.$el.trigger("messagebar:change");
      messagebar.emit("local::change messagebarChange", messagebar);
    }
    function onTextareaFocus() {
      messagebar.sheetHide();
      messagebar.$el.addClass("messagebar-focused");
      messagebar.$el.trigger("messagebar:focus");
      messagebar.emit("local::focus messagebarFocus", messagebar);
    }
    function onTextareaBlur() {
      messagebar.$el.removeClass("messagebar-focused");
      messagebar.$el.trigger("messagebar:blur");
      messagebar.emit("local::blur messagebarBlur", messagebar);
    }
    messagebar.attachEvents = function attachEvents() {
      $el.on("textarea:resize", onAppResize);
      $el.on("submit", onSubmit);
      $el.on("click", ".messagebar-attachment", onAttachmentClick);
      $textareaEl.on("change input", onTextareaChange);
      $textareaEl.on("focus", onTextareaFocus);
      $textareaEl.on("blur", onTextareaBlur);
      app.on("resize", onAppResize);
    };
    messagebar.detachEvents = function detachEvents() {
      $el.off("textarea:resize", onAppResize);
      $el.off("submit", onSubmit);
      $el.off("click", ".messagebar-attachment", onAttachmentClick);
      $textareaEl.off("change input", onTextareaChange);
      $textareaEl.off("focus", onTextareaFocus);
      $textareaEl.off("blur", onTextareaBlur);
      app.off("resize", onAppResize);
    };
    messagebar.useModules();
    messagebar.init();
    return messagebar;
  }
  focus() {
    const messagebar = this;
    messagebar.$textareaEl.focus();
    return messagebar;
  }
  blur() {
    const messagebar = this;
    messagebar.$textareaEl.blur();
    return messagebar;
  }
  clear() {
    const messagebar = this;
    messagebar.$textareaEl.val("").trigger("change");
    return messagebar;
  }
  getValue() {
    const messagebar = this;
    return messagebar.$textareaEl.val().trim();
  }
  setValue(value) {
    const messagebar = this;
    messagebar.$textareaEl.val(value).trigger("change");
    return messagebar;
  }
  setPlaceholder(placeholder) {
    const messagebar = this;
    messagebar.$textareaEl.attr("placeholder", placeholder);
    return messagebar;
  }
  resizePage() {
    const messagebar = this;
    const {
      params,
      $el,
      top,
      $pageEl,
      $pageContentEl,
      $areaEl,
      $textareaEl,
      $sheetEl,
      $attachmentsEl
    } = messagebar;
    const elHeight = $el[0].offsetHeight;
    let maxHeight = params.maxHeight;
    if (top) {
    } else {
      const currentPaddingBottom = parseInt($pageContentEl.css("padding-bottom"), 10);
      const requiredPaddingBottom = elHeight + params.bottomOffset;
      if (requiredPaddingBottom !== currentPaddingBottom && $pageContentEl.length) {
        const currentPaddingTop = parseInt($pageContentEl.css("padding-top"), 10);
        const pageScrollHeight = $pageContentEl[0].scrollHeight;
        const pageOffsetHeight = $pageContentEl[0].offsetHeight;
        const pageScrollTop = $pageContentEl[0].scrollTop;
        const scrollOnBottom = pageScrollTop === pageScrollHeight - pageOffsetHeight;
        if (!maxHeight) {
          maxHeight = $pageEl[0].offsetHeight - currentPaddingTop - $sheetEl.outerHeight() - $attachmentsEl.outerHeight() - parseInt($areaEl.css("margin-top"), 10) - parseInt($areaEl.css("margin-bottom"), 10);
        }
        $textareaEl.css("max-height", `${maxHeight}px`);
        $pageContentEl.css("padding-bottom", `${requiredPaddingBottom}px`);
        if (scrollOnBottom) {
          $pageContentEl.scrollTop($pageContentEl[0].scrollHeight - pageOffsetHeight);
        }
        $el.trigger("messagebar:resizepage");
        messagebar.emit("local::resizePage messagebarResizePage", messagebar);
      }
    }
  }
  checkEmptyState() {
    const messagebar = this;
    const {
      $el,
      $textareaEl
    } = messagebar;
    const value = $textareaEl.val().trim();
    if (value && value.length) {
      $el.addClass("messagebar-with-value");
    } else {
      $el.removeClass("messagebar-with-value");
    }
  }
  attachmentsCreate(innerHTML) {
    if (innerHTML === void 0) {
      innerHTML = "";
    }
    const messagebar = this;
    const $attachmentsEl = dom7_default(`<div class="messagebar-attachments">${innerHTML}</div>`);
    $attachmentsEl.insertBefore(messagebar.$textareaEl);
    extend(messagebar, {
      $attachmentsEl,
      attachmentsEl: $attachmentsEl[0]
    });
    return messagebar;
  }
  attachmentsShow(innerHTML) {
    if (innerHTML === void 0) {
      innerHTML = "";
    }
    const messagebar = this;
    messagebar.$attachmentsEl = messagebar.$el.find(".messagebar-attachments");
    if (messagebar.$attachmentsEl.length === 0) {
      messagebar.attachmentsCreate(innerHTML);
    }
    messagebar.$el.addClass("messagebar-attachments-visible");
    messagebar.attachmentsVisible = true;
    if (messagebar.params.resizePage) {
      messagebar.resizePage();
    }
    return messagebar;
  }
  attachmentsHide() {
    const messagebar = this;
    messagebar.$el.removeClass("messagebar-attachments-visible");
    messagebar.attachmentsVisible = false;
    if (messagebar.params.resizePage) {
      messagebar.resizePage();
    }
    return messagebar;
  }
  attachmentsToggle() {
    const messagebar = this;
    if (messagebar.attachmentsVisible) {
      messagebar.attachmentsHide();
    } else {
      messagebar.attachmentsShow();
    }
    return messagebar;
  }
  renderAttachment(attachment) {
    const messagebar = this;
    if (messagebar.params.renderAttachment) {
      return messagebar.params.renderAttachment.call(messagebar, attachment);
    }
    return `
      <div class="messagebar-attachment">
        <img src="${attachment}">
        <span class="messagebar-attachment-delete"></span>
      </div>
    `;
  }
  renderAttachments() {
    const messagebar = this;
    let html;
    if (messagebar.params.renderAttachments) {
      html = messagebar.params.renderAttachments.call(messagebar, messagebar.attachments);
    } else {
      html = `${messagebar.attachments.map((attachment) => messagebar.renderAttachment(attachment)).join("")}`;
    }
    if (messagebar.$attachmentsEl.length === 0) {
      messagebar.attachmentsCreate(html);
    } else {
      messagebar.$attachmentsEl.html(html);
    }
  }
  sheetCreate(innerHTML) {
    if (innerHTML === void 0) {
      innerHTML = "";
    }
    const messagebar = this;
    const $sheetEl = dom7_default(`<div class="messagebar-sheet">${innerHTML}</div>`);
    messagebar.$el.append($sheetEl);
    extend(messagebar, {
      $sheetEl,
      sheetEl: $sheetEl[0]
    });
    return messagebar;
  }
  sheetShow(innerHTML) {
    if (innerHTML === void 0) {
      innerHTML = "";
    }
    const messagebar = this;
    messagebar.$sheetEl = messagebar.$el.find(".messagebar-sheet");
    if (messagebar.$sheetEl.length === 0) {
      messagebar.sheetCreate(innerHTML);
    }
    messagebar.$el.addClass("messagebar-sheet-visible");
    messagebar.sheetVisible = true;
    if (messagebar.params.resizePage) {
      messagebar.resizePage();
    }
    return messagebar;
  }
  sheetHide() {
    const messagebar = this;
    messagebar.$el.removeClass("messagebar-sheet-visible");
    messagebar.sheetVisible = false;
    if (messagebar.params.resizePage) {
      messagebar.resizePage();
    }
    return messagebar;
  }
  sheetToggle() {
    const messagebar = this;
    if (messagebar.sheetVisible) {
      messagebar.sheetHide();
    } else {
      messagebar.sheetShow();
    }
    return messagebar;
  }
  init() {
    const messagebar = this;
    messagebar.attachEvents();
    messagebar.checkEmptyState();
    return messagebar;
  }
  destroy() {
    const messagebar = this;
    messagebar.emit("local::beforeDestroy messagebarBeforeDestroy", messagebar);
    messagebar.$el.trigger("messagebar:beforedestroy");
    messagebar.detachEvents();
    if (messagebar.$el[0]) {
      messagebar.$el[0].f7Messagebar = null;
      delete messagebar.$el[0].f7Messagebar;
    }
    deleteProps(messagebar);
  }
};
var messagebar_class_default = Messagebar;

// node_modules/framework7/components/messagebar/messagebar.js
var messagebar_default = {
  name: "messagebar",
  static: {
    Messagebar: messagebar_class_default
  },
  create() {
    const app = this;
    app.messagebar = ConstructorMethods({
      defaultSelector: ".messagebar",
      constructor: messagebar_class_default,
      app,
      domProp: "f7Messagebar",
      addMethods: "clear getValue setValue setPlaceholder resizePage focus blur attachmentsCreate attachmentsShow attachmentsHide attachmentsToggle renderAttachments sheetCreate sheetShow sheetHide sheetToggle".split(" ")
    });
  },
  on: {
    tabBeforeRemove(tabEl) {
      const app = this;
      dom7_default(tabEl).find(".messagebar-init").each((messagebarEl) => {
        app.messagebar.destroy(messagebarEl);
      });
    },
    tabMounted(tabEl) {
      const app = this;
      dom7_default(tabEl).find(".messagebar-init").each((messagebarEl) => {
        app.messagebar.create(extend({
          el: messagebarEl
        }, dom7_default(messagebarEl).dataset()));
      });
    },
    pageBeforeRemove(page) {
      const app = this;
      page.$el.find(".messagebar-init").each((messagebarEl) => {
        app.messagebar.destroy(messagebarEl);
      });
    },
    pageInit(page) {
      const app = this;
      page.$el.find(".messagebar-init").each((messagebarEl) => {
        app.messagebar.create(extend({
          el: messagebarEl
        }, dom7_default(messagebarEl).dataset()));
      });
    }
  },
  vnode: {
    "messagebar-init": {
      insert(vnode) {
        const app = this;
        const messagebarEl = vnode.elm;
        app.messagebar.create(extend({
          el: messagebarEl
        }, dom7_default(messagebarEl).dataset()));
      },
      destroy(vnode) {
        const app = this;
        const messagebarEl = vnode.elm;
        app.messagebar.destroy(messagebarEl);
      }
    }
  }
};
export {
  messagebar_default as default
};
//# sourceMappingURL=framework7_components_messagebar.js.map
