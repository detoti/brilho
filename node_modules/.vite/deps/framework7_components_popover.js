import {
  ModalMethods,
  modal_class_default
} from "./chunk-2SPOWFPE.js";
import {
  getDevice
} from "./chunk-XFNZVQ4Z.js";
import "./chunk-CMOS4D7O.js";
import "./chunk-JWL65P4K.js";
import "./chunk-GBDLSSFZ.js";
import {
  dom7_default
} from "./chunk-GWMKRGKK.js";
import {
  extend
} from "./chunk-UUGCU45C.js";
import {
  getDocument,
  getWindow
} from "./chunk-PRZ7VHHA.js";
import "./chunk-ZS7NZCD4.js";

// node_modules/framework7/components/popover/popover-class.js
var Popover = class extends modal_class_default {
  constructor(app, params) {
    const extendedParams = extend({
      on: {}
    }, app.params.popover, params);
    super(app, extendedParams);
    const popover = this;
    const device = getDevice();
    const window = getWindow();
    const document = getDocument();
    popover.params = extendedParams;
    let $el;
    if (!popover.params.el) {
      $el = dom7_default(popover.params.content).filter((node) => node.nodeType === 1).eq(0);
    } else {
      $el = dom7_default(popover.params.el).eq(0);
    }
    if ($el && $el.length > 0 && $el[0].f7Modal) {
      return $el[0].f7Modal;
    }
    const $targetEl = dom7_default(popover.params.targetEl).eq(0);
    if ($el.length === 0) {
      return popover.destroy();
    }
    let $backdropEl;
    const forceBackdropUnique = popover.params.backdrop && app.$el.find(".popover.modal-in").filter((anotherPopoverEl) => anotherPopoverEl !== $el[0]).length > 0;
    if (popover.params.backdrop && popover.params.backdropEl) {
      $backdropEl = dom7_default(popover.params.backdropEl);
    } else if (popover.params.backdrop) {
      if (popover.params.backdropUnique || forceBackdropUnique) {
        $backdropEl = dom7_default('<div class="popover-backdrop popover-backdrop-unique"></div>');
        $backdropEl[0].f7PopoverRef = popover;
        popover.$containerEl.append($backdropEl);
      } else {
        $backdropEl = popover.$containerEl.children(".popover-backdrop");
      }
      if ($backdropEl.length === 0) {
        $backdropEl = dom7_default('<div class="popover-backdrop"></div>');
        popover.$containerEl.append($backdropEl);
      }
    }
    let $arrowEl;
    if ($el.find(".popover-arrow").length === 0 && popover.params.arrow) {
      $arrowEl = dom7_default('<div class="popover-arrow"></div>');
      $el.prepend($arrowEl);
    } else {
      $arrowEl = $el.find(".popover-arrow");
    }
    const originalOpen = popover.open;
    extend(popover, {
      app,
      $el,
      el: $el[0],
      $targetEl,
      targetEl: $targetEl[0],
      $arrowEl,
      arrowEl: $arrowEl[0],
      $backdropEl,
      backdropEl: $backdropEl && $backdropEl[0],
      type: "popover",
      forceBackdropUnique,
      open() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        let [targetEl, animate] = args;
        if (typeof args[0] === "boolean")
          [animate, targetEl] = args;
        if (targetEl) {
          popover.$targetEl = dom7_default(targetEl);
          popover.targetEl = popover.$targetEl[0];
        }
        return originalOpen.call(popover, animate);
      }
    });
    function handleResize() {
      popover.resize();
    }
    popover.on("popoverOpen", () => {
      popover.resize();
      app.on("resize", handleResize);
      dom7_default(window).on("keyboardDidShow keyboardDidHide", handleResize);
      popover.on("popoverClose popoverBeforeDestroy", () => {
        app.off("resize", handleResize);
        dom7_default(window).off("keyboardDidShow keyboardDidHide", handleResize);
      });
    });
    let touchStartTarget = null;
    function handleTouchStart(e) {
      touchStartTarget = e.target;
    }
    function handleClick(e) {
      const target = e.target;
      const $target = dom7_default(target);
      const keyboardOpened = !device.desktop && device.cordova && (window.Keyboard && window.Keyboard.isVisible || window.cordova.plugins && window.cordova.plugins.Keyboard && window.cordova.plugins.Keyboard.isVisible);
      if (keyboardOpened)
        return;
      if ($target.closest(popover.el).length === 0) {
        if (popover.params.closeByBackdropClick && popover.params.backdrop && popover.backdropEl && popover.backdropEl === target && touchStartTarget === target) {
          popover.close();
        } else if (popover.params.closeByOutsideClick && touchStartTarget === target) {
          const isAnotherPopoverBackdrop = $target.hasClass("popover-backdrop-unique") && target.f7PopoverRef !== popover || $target.hasClass("popover-backdrop") && target !== popover.backdropEl;
          const isAnotherPopoverTarget = target.closest(".popover") && target.closest(".popover") !== popover.$el[0];
          if (!isAnotherPopoverBackdrop && !isAnotherPopoverTarget) {
            popover.close();
          }
        }
      }
    }
    function onKeyDown(e) {
      const keyCode = e.keyCode;
      if (keyCode === 27 && popover.params.closeOnEscape) {
        popover.close();
      }
    }
    if (popover.params.closeOnEscape) {
      popover.on("popoverOpen", () => {
        dom7_default(document).on("keydown", onKeyDown);
      });
      popover.on("popoverClose", () => {
        dom7_default(document).off("keydown", onKeyDown);
      });
    }
    popover.on("popoverOpened", () => {
      if (popover.params.closeByOutsideClick || popover.params.closeByBackdropClick) {
        app.on("touchstart", handleTouchStart);
        app.on("click", handleClick);
      }
    });
    popover.on("popoverClose", () => {
      if (popover.params.closeByOutsideClick || popover.params.closeByBackdropClick) {
        app.off("touchstart", handleTouchStart);
        app.off("click", handleClick);
      }
    });
    $el[0].f7Modal = popover;
    return popover;
  }
  resize() {
    const popover = this;
    const {
      app,
      $el,
      $targetEl,
      $arrowEl
    } = popover;
    const {
      targetX,
      targetY,
      verticalPosition
    } = popover.params;
    $el.css({
      left: "",
      top: ""
    });
    const [width, height] = [$el.width(), $el.height()];
    let arrowSize = 0;
    let arrowLeft;
    let arrowTop;
    const hasArrow = $arrowEl.length > 0;
    const arrowMin = app.theme === "ios" ? 13 : 24;
    if (hasArrow) {
      $arrowEl.removeClass("on-left on-right on-top on-bottom").css({
        left: "",
        top: ""
      });
      arrowSize = $arrowEl.width() / 2;
    }
    $el.removeClass("popover-on-left popover-on-right popover-on-top popover-on-bottom popover-on-middle").css({
      left: "",
      top: ""
    });
    let targetWidth;
    let targetHeight;
    let targetOffsetLeft;
    let targetOffsetTop;
    let safeAreaTop = parseInt(dom7_default("html").css("--f7-safe-area-top"), 10);
    let safeAreaLeft = parseInt(dom7_default("html").css("--f7-safe-area-left"), 10);
    let safeAreaRight = parseInt(dom7_default("html").css("--f7-safe-area-right"), 10);
    if (Number.isNaN(safeAreaTop))
      safeAreaTop = 0;
    if (Number.isNaN(safeAreaLeft))
      safeAreaLeft = 0;
    if (Number.isNaN(safeAreaRight))
      safeAreaRight = 0;
    if ($targetEl && $targetEl.length > 0) {
      targetWidth = $targetEl.outerWidth();
      targetHeight = $targetEl.outerHeight();
      const targetOffset = $targetEl.offset();
      targetOffsetLeft = targetOffset.left - app.left;
      targetOffsetTop = targetOffset.top - app.top;
      const targetParentPage = $targetEl.parents(".page");
      if (targetParentPage.length > 0) {
        targetOffsetTop -= targetParentPage[0].scrollTop;
      }
    } else if (typeof targetX !== "undefined" && targetY !== "undefined") {
      targetOffsetLeft = targetX;
      targetOffsetTop = targetY;
      targetWidth = popover.params.targetWidth || 0;
      targetHeight = popover.params.targetHeight || 0;
    }
    let [left, top, diff] = [0, 0, 0];
    const forcedPosition = verticalPosition === "auto" ? false : verticalPosition;
    let position = forcedPosition || "top";
    if (forcedPosition === "top" || !forcedPosition && height + arrowSize < targetOffsetTop - safeAreaTop) {
      top = targetOffsetTop - height - arrowSize;
    } else if (forcedPosition === "bottom" || !forcedPosition && height + arrowSize < app.height - targetOffsetTop - targetHeight) {
      position = "bottom";
      top = targetOffsetTop + targetHeight + arrowSize;
    } else {
      position = "middle";
      top = targetHeight / 2 + targetOffsetTop - height / 2;
      diff = top;
      top = Math.max(5, Math.min(top, app.height - height - 5));
      diff -= top;
    }
    if (position === "top" || position === "bottom") {
      left = targetWidth / 2 + targetOffsetLeft - width / 2;
      diff = left;
      left = Math.max(5, Math.min(left, app.width - width - 5));
      if (safeAreaLeft) {
        left = Math.max(left, safeAreaLeft);
      }
      if (safeAreaRight && left + width > app.width - 5 - safeAreaRight) {
        left = app.width - 5 - safeAreaRight - width;
      }
      diff -= left;
      if (hasArrow) {
        if (position === "top") {
          $arrowEl.addClass("on-bottom");
        }
        if (position === "bottom") {
          $arrowEl.addClass("on-top");
        }
        arrowLeft = width / 2 - arrowSize + diff;
        arrowLeft = Math.max(Math.min(arrowLeft, width - arrowSize * 2 - arrowMin), arrowMin);
        $arrowEl.css({
          left: `${arrowLeft}px`
        });
      }
    } else if (position === "middle") {
      left = targetOffsetLeft - width - arrowSize;
      if (hasArrow)
        $arrowEl.addClass("on-right");
      if (left < 5 || left + width + safeAreaRight > app.width || left < safeAreaLeft) {
        if (left < 5)
          left = targetOffsetLeft + targetWidth + arrowSize;
        if (left + width + safeAreaRight > app.width)
          left = app.width - width - 5 - safeAreaRight;
        if (left < safeAreaLeft)
          left = safeAreaLeft;
        if (hasArrow)
          $arrowEl.removeClass("on-right").addClass("on-left");
      }
      if (hasArrow) {
        arrowTop = height / 2 - arrowSize + diff;
        arrowTop = Math.max(Math.min(arrowTop, height - arrowSize * 2 - arrowMin), arrowMin);
        $arrowEl.css({
          top: `${arrowTop}px`
        });
      }
    }
    let hPosition;
    if (targetOffsetLeft < app.width / 2) {
      hPosition = "right";
    } else {
      hPosition = "left";
    }
    $el.addClass(`popover-on-${position} popover-on-${hPosition}`);
    $el.css({
      top: `${top}px`,
      left: `${left}px`
    });
  }
};
var popover_class_default = Popover;

// node_modules/framework7/components/popover/popover.js
var popover_default = {
  name: "popover",
  params: {
    popover: {
      verticalPosition: "auto",
      arrow: true,
      backdrop: true,
      backdropEl: void 0,
      backdropUnique: false,
      closeByBackdropClick: true,
      closeByOutsideClick: true,
      closeOnEscape: false,
      containerEl: null
    }
  },
  static: {
    Popover: popover_class_default
  },
  create() {
    const app = this;
    app.popover = extend(ModalMethods({
      app,
      constructor: popover_class_default,
      defaultSelector: ".popover.modal-in"
    }), {
      open(popoverEl, targetEl, animate) {
        let $popoverEl = dom7_default(popoverEl);
        if ($popoverEl.length > 1) {
          const $targetPage = dom7_default(targetEl).parents(".page");
          if ($targetPage.length) {
            $popoverEl.each((el) => {
              const $el = dom7_default(el);
              if ($el.parents($targetPage)[0] === $targetPage[0]) {
                $popoverEl = $el;
              }
            });
          }
        }
        if ($popoverEl.length > 1) {
          $popoverEl = $popoverEl.eq($popoverEl.length - 1);
        }
        let popover = $popoverEl[0].f7Modal;
        const data = $popoverEl.dataset();
        if (!popover) {
          popover = new popover_class_default(app, Object.assign({
            el: $popoverEl,
            targetEl
          }, data));
        }
        return popover.open(targetEl, animate);
      }
    });
  },
  clicks: {
    ".popover-open": function openPopover($clickedEl, data) {
      if (data === void 0) {
        data = {};
      }
      const app = this;
      app.popover.open(data.popover, $clickedEl, data.animate);
    },
    ".popover-close": function closePopover($clickedEl, data) {
      if (data === void 0) {
        data = {};
      }
      const app = this;
      app.popover.close(data.popover, data.animate, $clickedEl);
    }
  }
};
export {
  popover_default as default
};
//# sourceMappingURL=framework7_components_popover.js.map
