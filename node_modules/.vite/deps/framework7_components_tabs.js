import {
  dom7_default
} from "./chunk-GWMKRGKK.js";
import {
  extend
} from "./chunk-UUGCU45C.js";
import "./chunk-PRZ7VHHA.js";
import "./chunk-ZS7NZCD4.js";

// node_modules/framework7/components/tabs/tabs.js
var Tab = {
  show() {
    const app = this;
    let tabEl;
    let tabLinkEl;
    let animate;
    let tabRoute;
    let animatedInit;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length === 1 && args[0] && args[0].constructor === Object) {
      tabEl = args[0].tabEl;
      tabLinkEl = args[0].tabLinkEl;
      animate = args[0].animate;
      tabRoute = args[0].tabRoute;
      animatedInit = args[0].animatedInit;
    } else {
      [tabEl, tabLinkEl, animate, tabRoute] = args;
      if (typeof args[1] === "boolean") {
        [tabEl, animate, tabLinkEl, tabRoute] = args;
        if (args.length > 2 && tabLinkEl.constructor === Object) {
          [tabEl, animate, tabRoute, tabLinkEl] = args;
        }
      }
    }
    if (typeof animate === "undefined")
      animate = true;
    const $newTabEl = dom7_default(tabEl);
    if (tabRoute && $newTabEl[0]) {
      $newTabEl[0].f7TabRoute = tabRoute;
    }
    if (!animatedInit && ($newTabEl.length === 0 || $newTabEl.hasClass("tab-active"))) {
      return {
        $newTabEl,
        newTabEl: $newTabEl[0]
      };
    }
    let $tabLinkEl;
    if (tabLinkEl)
      $tabLinkEl = dom7_default(tabLinkEl);
    const $tabsEl = $newTabEl.parent(".tabs");
    if ($tabsEl.length === 0) {
      return {
        $newTabEl,
        newTabEl: $newTabEl[0]
      };
    }
    if (app.swipeout)
      app.swipeout.allowOpen = true;
    const tabsChangedCallbacks = [];
    function onTabsChanged(callback) {
      tabsChangedCallbacks.push(callback);
    }
    function tabsChanged() {
      tabsChangedCallbacks.forEach((callback) => {
        callback();
      });
    }
    let animated = false;
    if ($tabsEl.parent().hasClass("tabs-animated-wrap")) {
      $tabsEl.parent()[animate ? "removeClass" : "addClass"]("not-animated");
      const transitionDuration = parseFloat($tabsEl.css("transition-duration").replace(",", "."));
      if (animate && transitionDuration) {
        $tabsEl.transitionEnd(tabsChanged);
        animated = true;
      }
      const tabsTranslate = (app.rtl ? $newTabEl.index() : -$newTabEl.index()) * 100;
      $tabsEl.transform(`translate3d(${tabsTranslate}%,0,0)`);
    }
    let swiper;
    if ($tabsEl[0].nodeName.toLowerCase() === "swiper-container" && app.swiper) {
      swiper = $tabsEl[0].swiper;
      const newTabIndex = swiper.slides.indexOf($newTabEl[0]);
      if (swiper && swiper.activeIndex !== newTabIndex) {
        animated = true;
        swiper.once("slideChangeTransitionEnd", () => {
          tabsChanged();
        }).slideTo(newTabIndex, animate ? void 0 : 0);
      } else if (swiper && swiper.animating) {
        animated = true;
        swiper.once("slideChangeTransitionEnd", () => {
          tabsChanged();
        });
      }
    }
    const $oldTabEl = $tabsEl.children(".tab-active");
    $oldTabEl.removeClass("tab-active");
    if (!animatedInit && (!swiper || swiper && !swiper.animating || swiper && tabRoute)) {
      if ($oldTabEl.hasClass("view") && $oldTabEl.children(".page").length) {
        $oldTabEl.children(".page").each((pageEl) => {
          dom7_default(pageEl).trigger("page:tabhide");
          app.emit("pageTabHide", pageEl);
        });
      }
      $oldTabEl.trigger("tab:hide");
      app.emit("tabHide", $oldTabEl[0]);
    }
    $newTabEl.addClass("tab-active");
    if (!animatedInit && (!swiper || swiper && !swiper.animating || swiper && tabRoute)) {
      if ($newTabEl.hasClass("view") && $newTabEl.children(".page").length) {
        $newTabEl.children(".page").each((pageEl) => {
          dom7_default(pageEl).trigger("page:tabshow");
          app.emit("pageTabShow", pageEl);
        });
      }
      $newTabEl.trigger("tab:show");
      app.emit("tabShow", $newTabEl[0]);
    }
    if (!$tabLinkEl) {
      if (typeof tabEl === "string")
        $tabLinkEl = dom7_default(`.tab-link[href="${tabEl}"]`);
      else
        $tabLinkEl = dom7_default(`.tab-link[href="#${$newTabEl.attr("id")}"]`);
      if (!$tabLinkEl || $tabLinkEl && $tabLinkEl.length === 0) {
        dom7_default("[data-tab]").each((el) => {
          if ($newTabEl.is(dom7_default(el).attr("data-tab")))
            $tabLinkEl = dom7_default(el);
        });
      }
      if (tabRoute && (!$tabLinkEl || $tabLinkEl && $tabLinkEl.length === 0)) {
        $tabLinkEl = dom7_default(`[data-route-tab-id="${tabRoute.route.tab.id}"]`);
        if ($tabLinkEl.length === 0) {
          $tabLinkEl = dom7_default(`.tab-link[href="${tabRoute.url}"]`);
        }
      }
      if ($tabLinkEl.length > 1 && $newTabEl.parents(".page").length) {
        $tabLinkEl = $tabLinkEl.filter((tabLinkElement) => {
          return dom7_default(tabLinkElement).parents(".page")[0] === $newTabEl.parents(".page")[0];
        });
        if (app.theme === "ios" && $tabLinkEl.length === 0 && tabRoute) {
          const $pageEl = $newTabEl.parents(".page");
          const $navbarEl = dom7_default(app.navbar.getElByPage($pageEl));
          $tabLinkEl = $navbarEl.find(`[data-route-tab-id="${tabRoute.route.tab.id}"]`);
          if ($tabLinkEl.length === 0) {
            $tabLinkEl = $navbarEl.find(`.tab-link[href="${tabRoute.url}"]`);
          }
        }
      }
    }
    if ($tabLinkEl.length > 0) {
      let $oldTabLinkEl;
      if ($oldTabEl && $oldTabEl.length > 0) {
        const oldTabId = $oldTabEl.attr("id");
        if (oldTabId) {
          $oldTabLinkEl = dom7_default(`.tab-link[href="#${oldTabId}"]`);
          if (!$oldTabLinkEl || $oldTabLinkEl && $oldTabLinkEl.length === 0) {
            $oldTabLinkEl = dom7_default(`.tab-link[data-route-tab-id="${oldTabId}"]`);
          }
        }
        if (!$oldTabLinkEl || $oldTabLinkEl && $oldTabLinkEl.length === 0) {
          dom7_default("[data-tab]").each((tabLinkElement) => {
            if ($oldTabEl.is(dom7_default(tabLinkElement).attr("data-tab")))
              $oldTabLinkEl = dom7_default(tabLinkElement);
          });
        }
        if (!$oldTabLinkEl || $oldTabLinkEl && $oldTabLinkEl.length === 0) {
          $oldTabLinkEl = $tabLinkEl.siblings(".tab-link-active");
        }
      } else if (tabRoute) {
        $oldTabLinkEl = $tabLinkEl.siblings(".tab-link-active");
      }
      if ($oldTabLinkEl && $oldTabLinkEl.length > 1 && $oldTabEl && $oldTabEl.parents(".page").length) {
        $oldTabLinkEl = $oldTabLinkEl.filter((tabLinkElement) => {
          return dom7_default(tabLinkElement).parents(".page")[0] === $oldTabEl.parents(".page")[0];
        });
      }
      if ($oldTabLinkEl && $oldTabLinkEl.length > 0)
        $oldTabLinkEl.removeClass("tab-link-active");
      if ($tabLinkEl && $tabLinkEl.length > 0) {
        $tabLinkEl.addClass("tab-link-active");
        const $tabbarEl = $tabLinkEl.parents(".tabbar, .tabbar-icons");
        const hasHighlight = app.toolbar && $tabbarEl.length > 0 && ($tabbarEl.hasClass("tabbar-highlight") || app.theme !== "ios");
        if (hasHighlight) {
          app.toolbar.setHighlight($tabbarEl);
        }
      }
    }
    return {
      $newTabEl,
      newTabEl: $newTabEl[0],
      $oldTabEl,
      oldTabEl: $oldTabEl[0],
      onTabsChanged,
      animated
    };
  }
};
var tabs_default = {
  name: "tabs",
  create() {
    const app = this;
    extend(app, {
      tab: {
        show: Tab.show.bind(app)
      }
    });
  },
  on: {
    "pageInit tabMounted": function onInit(pageOrTabEl) {
      const $el = dom7_default(pageOrTabEl.el || pageOrTabEl);
      const animatedTabEl = $el.find(".tabs-animated-wrap > .tabs > .tab-active")[0];
      if (!animatedTabEl)
        return;
      const app = this;
      app.tab.show({
        tabEl: animatedTabEl,
        animatedInit: true,
        animate: false
      });
    }
  },
  clicks: {
    ".tab-link": function tabLinkClick($clickedEl, data) {
      if (data === void 0) {
        data = {};
      }
      if ($clickedEl.attr("href") && $clickedEl.attr("href").indexOf("#") === 0 || $clickedEl.attr("data-tab")) {
        const app = this;
        app.tab.show({
          tabEl: data.tab || $clickedEl.attr("href"),
          tabLinkEl: $clickedEl,
          animate: data.animate
        });
      }
    }
  }
};
export {
  tabs_default as default
};
//# sourceMappingURL=framework7_components_tabs.js.map
