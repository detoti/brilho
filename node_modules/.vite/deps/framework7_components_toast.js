import {
  ModalMethods,
  modal_class_default
} from "./chunk-2SPOWFPE.js";
import {
  jsx_default
} from "./chunk-OUNVTANF.js";
import "./chunk-JWL65P4K.js";
import "./chunk-GBDLSSFZ.js";
import {
  dom7_default
} from "./chunk-GWMKRGKK.js";
import {
  extend,
  nextTick
} from "./chunk-UUGCU45C.js";
import {
  getWindow
} from "./chunk-PRZ7VHHA.js";
import "./chunk-ZS7NZCD4.js";

// node_modules/framework7/components/toast/toast-class.js
var Toast = class extends modal_class_default {
  constructor(app, params) {
    const extendedParams = extend({
      on: {}
    }, app.params.toast, params);
    super(app, extendedParams);
    const toast = this;
    const window = getWindow();
    toast.app = app;
    toast.params = extendedParams;
    const {
      closeButton,
      closeTimeout
    } = toast.params;
    let $el;
    if (!toast.params.el) {
      const toastHtml = toast.render();
      $el = dom7_default(toastHtml);
    } else {
      $el = dom7_default(toast.params.el);
    }
    if ($el && $el.length > 0 && $el[0].f7Modal) {
      return $el[0].f7Modal;
    }
    if ($el.length === 0) {
      return toast.destroy();
    }
    extend(toast, {
      $el,
      el: $el[0],
      type: "toast"
    });
    $el[0].f7Modal = toast;
    if (closeButton) {
      $el.find(".toast-button").on("click", () => {
        toast.emit("local::closeButtonClick toastCloseButtonClick", toast);
        toast.close();
      });
      toast.on("beforeDestroy", () => {
        $el.find(".toast-button").off("click");
      });
    }
    let timeoutId;
    toast.on("open", () => {
      dom7_default(".toast.modal-in").each((openedEl) => {
        const toastInstance = app.toast.get(openedEl);
        if (openedEl !== toast.el && toastInstance) {
          toastInstance.close();
        }
      });
      if (closeTimeout) {
        timeoutId = nextTick(() => {
          toast.close();
        }, closeTimeout);
      }
    });
    toast.on("close", () => {
      window.clearTimeout(timeoutId);
    });
    if (toast.params.destroyOnClose) {
      toast.once("closed", () => {
        setTimeout(() => {
          toast.destroy();
        }, 0);
      });
    }
    return toast;
  }
  render() {
    const toast = this;
    if (toast.params.render)
      return toast.params.render.call(toast, toast);
    const {
      position,
      horizontalPosition,
      cssClass,
      icon,
      text,
      closeButton,
      closeButtonColor,
      closeButtonText
    } = toast.params;
    const horizontalClass = position === "top" || position === "bottom" ? `toast-horizontal-${horizontalPosition}` : "";
    return jsx_default("div", {
      class: `toast toast-${position} ${horizontalClass} ${cssClass || ""} ${icon ? "toast-with-icon" : ""}`
    }, jsx_default("div", {
      class: "toast-content"
    }, icon && jsx_default("div", {
      class: "toast-icon"
    }, icon), jsx_default("div", {
      class: "toast-text"
    }, text), closeButton && !icon && jsx_default("a", {
      class: `toast-button button ${closeButtonColor ? `color-${closeButtonColor}` : ""}`
    }, closeButtonText)));
  }
};
var toast_class_default = Toast;

// node_modules/framework7/components/toast/toast.js
var toast_default = {
  name: "toast",
  static: {
    Toast: toast_class_default
  },
  create() {
    const app = this;
    app.toast = extend({}, ModalMethods({
      app,
      constructor: toast_class_default,
      defaultSelector: ".toast.modal-in"
    }), {
      // Shortcuts
      show(params) {
        extend(params, {
          destroyOnClose: true
        });
        return new toast_class_default(app, params).open();
      }
    });
  },
  params: {
    toast: {
      icon: null,
      text: null,
      position: "bottom",
      horizontalPosition: "left",
      closeButton: false,
      closeButtonColor: null,
      closeButtonText: "Ok",
      closeTimeout: null,
      cssClass: null,
      render: null,
      containerEl: null
    }
  }
};
export {
  toast_default as default
};
//# sourceMappingURL=framework7_components_toast.js.map
